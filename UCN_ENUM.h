#ifndef _UCN_CUDA_ENUM
#define _UCN_CUDA_ENUM


enum e_derivs {
  e_derivs_X, 
  e_derivs_Y, 
  e_derivs_Z, 
  e_derivs_VX, 
  e_derivs_VY, 
  e_derivs_VZ, 
  e_derivs_RED_VX, 
  e_derivs_RED_VY, 
  e_derivs_RED_VZ, 
  e_derivs_AX, 
  e_derivs_AY, 
  e_derivs_AZ, 
  e_derivs_SX, 
  e_derivs_SY, 
  e_derivs_SZ, 
  e_derivs_BX, 
  e_derivs_BY, 
  e_derivs_BZ, 
  e_derivs_dB_XDX, 
  e_derivs_dB_XDY, 
  e_derivs_dB_XDZ, 
  e_derivs_dB_YDX, 
  e_derivs_dB_YDY, 
  e_derivs_dB_YDZ, 
  e_derivs_dB_ZDX, 
  e_derivs_dB_ZDY, 
  e_derivs_dB_ZDZ, 
  e_derivs_LAST
};
enum e_rkck {
  e_rkck_T, 
  e_rkck_X, 
  e_rkck_Y, 
  e_rkck_Z, 
  e_rkck_VX, 
  e_rkck_VY, 
  e_rkck_VZ, 
  e_rkck_RED_VX, 
  e_rkck_RED_VY, 
  e_rkck_RED_VZ,  
  e_rkck_AX, 
  e_rkck_AY, 
  e_rkck_AZ, 
  e_rkck_H, 
  e_rkck_ERR_X, 
  e_rkck_ERR_Y, 
  e_rkck_ERR_Z, 
  e_rkck_ERR_VX, 
  e_rkck_ERR_VY, 
  e_rkck_ERR_VZ, 
  e_rkck_OUT_X, 
  e_rkck_OUT_Y, 
  e_rkck_OUT_Z, 
  e_rkck_OUT_VX, 
  e_rkck_OUT_VY, 
  e_rkck_OUT_VZ, 
  e_rkck_SX, 
  e_rkck_SY, 
  e_rkck_SZ, 
  e_rkck_BX, 
  e_rkck_BY, 
  e_rkck_BZ, 
  e_rkck_dB_XDX, 
  e_rkck_dB_XDY, 
  e_rkck_dB_XDZ, 
  e_rkck_dB_YDX, 
  e_rkck_dB_YDY, 
  e_rkck_dB_YDZ, 
  e_rkck_dB_ZDX, 
  e_rkck_dB_ZDY, 
  e_rkck_dB_ZDZ, 
  e_rkck_LAST
};
enum e_rkqs {
  e_rkqs_p_t, 
  e_rkqs_htry, 
  e_rkqs_eps, 
  e_rkqs_p_hdid, 
  e_rkqs_p_hnext, 
  e_rkqs_T, 
  e_rkqs_X, 
  e_rkqs_Y, 
  e_rkqs_Z, 
  e_rkqs_VX, 
  e_rkqs_VY, 
  e_rkqs_VZ, 
  e_rkqs_RED_VX, 
  e_rkqs_RED_VY, 
  e_rkqs_RED_VZ,  
  e_rkqs_AX, 
  e_rkqs_AY, 
  e_rkqs_AZ, 
  e_rkqs_SCAL_X, 
  e_rkqs_SCAL_Y, 
  e_rkqs_SCAL_Z, 
  e_rkqs_SCAL_VX, 
  e_rkqs_SCAL_VY, 
  e_rkqs_SCAL_VZ, 
  e_rkqs_SX, 
  e_rkqs_SY, 
  e_rkqs_SZ, 
  e_rkqs_BX, 
  e_rkqs_BY, 
  e_rkqs_BZ, 
  e_rkqs_dB_XDX, 
  e_rkqs_dB_XDY, 
  e_rkqs_dB_XDZ, 
  e_rkqs_dB_YDX, 
  e_rkqs_dB_YDY, 
  e_rkqs_dB_YDZ, 
  e_rkqs_dB_ZDX, 
  e_rkqs_dB_ZDY, 
  e_rkqs_dB_ZDZ, 
  e_rkqs_ERR_X, 
  e_rkqs_ERR_Y, 
  e_rkqs_ERR_Z, 
  e_rkqs_ERR_VX, 
  e_rkqs_ERR_VY, 
  e_rkqs_ERR_VZ, 
  e_rkqs_LAST
};
enum e_odeint {
  e_odeint_T, 
  e_odeint_X, 
  e_odeint_Y, 
  e_odeint_Z, 
  e_odeint_VX, 
  e_odeint_VY, 
  e_odeint_VZ, 
  e_odeint_SX, 
  e_odeint_SY, 
  e_odeint_SZ, 
  e_odeint_t1, 
  e_odeint_t2, 
  e_odeint_eps, 
  e_odeint_ERR_X, 
  e_odeint_ERR_Y, 
  e_odeint_ERR_Z, 
  e_odeint_ERR_VX, 
  e_odeint_ERR_VY, 
  e_odeint_ERR_VZ, 
  e_odeint_h1, 
  e_odeint_hmin, 
  e_odeint_BX, 
  e_odeint_BY, 
  e_odeint_BZ, 
  e_odeint_dB_XDX, 
  e_odeint_dB_XDY, 
  e_odeint_dB_XDZ, 
  e_odeint_dB_YDX, 
  e_odeint_dB_YDY, 
  e_odeint_dB_YDZ, 
  e_odeint_dB_ZDX, 
  e_odeint_dB_ZDY, 
  e_odeint_dB_ZDZ, 
  e_odeint_RED_VX, 
  e_odeint_RED_VY, 
  e_odeint_RED_VZ,  
  e_odeint_AX, 
  e_odeint_AY, 
  e_odeint_AZ, 
  e_odeint_LAST
};
// enum e_d_IO {
  // e_d_IO_T, 
  // e_d_IO_X, 
  // e_d_IO_Y, 
  // e_d_IO_Z, 
  // e_d_IO_VX, 
  // e_d_IO_VY, 
  // e_d_IO_VZ, 
  // e_d_IO_SX, 
  // e_d_IO_SY, 
  // e_d_IO_SZ, 
  // e_d_IO_ERR_X, 
  // e_d_IO_ERR_Y, 
  // e_d_IO_ERR_Z, 
  // e_d_IO_ERR_VX, 
  // e_d_IO_ERR_VY, 
  // e_d_IO_ERR_VZ, 
  // e_d_IO_RED_VX, 
  // e_d_IO_RED_VY, 
  // e_d_IO_RED_VZ,  
  // e_d_IO_AX, 
  // e_d_IO_AY, 
  // e_d_IO_AZ, 
  // e_d_IO_SCAL_X, 
  // e_d_IO_SCAL_Y, 
  // e_d_IO_SCAL_Z, 
  // e_d_IO_SCAL_VX, 
  // e_d_IO_SCAL_VY, 
  // e_d_IO_SCAL_VZ, 
  // e_d_IO_BX, 
  // e_d_IO_BY, 
  // e_d_IO_BZ, 
  // e_d_IO_dB_XDX, 
  // e_d_IO_dB_XDY, 
  // e_d_IO_dB_XDZ, 
  // e_d_IO_dB_YDX, 
  // e_d_IO_dB_YDY, 
  // e_d_IO_dB_YDZ, 
  // e_d_IO_dB_ZDX, 
  // e_d_IO_dB_ZDY, 
  // e_d_IO_dB_ZDZ, 
  // e_d_IO_SPINNOR_0, 
  // e_d_IO_SPINNOR_1, 
  // e_d_IO_SPINNOR_2, 
  // e_d_IO_SPINNOR_3, 
  // e_d_IO_POLARIZATION, 
  // e_d_IO_LAST
// };
enum e_RKQS_ERROR {
  e_RKQS_ERROR_NONE,
  e_RKQS_ERROR_STEPSIZE_UNDERFLOW,
  e_RKQS_ERROR_XV_BOUNDS,
  e_RKQS_ERROR_SPIN_BOUNDS,
  e_RKQS_ERROR_COMBINED_BOUNDS,
  e_RKQS_ERROR_REVERSED_INTERVAL,
  e_RKQS_ERROR_UNKNOWN,
  e_RKQS_ERROR_LAST
};
enum e_d_INPUT_INT {
  e_d_INPUT_INT_THREAD,
  e_d_INPUT_INT_RECORD,
  e_d_INPUT_INT_LAST
};
enum e_d_INPUT {
  e_d_INPUT_T, 
  e_d_INPUT_X, 
  e_d_INPUT_Y, 
  e_d_INPUT_Z, 
  e_d_INPUT_VX, 
  e_d_INPUT_VY, 
  e_d_INPUT_VZ, 
  e_d_INPUT_SPINNOR_0, 
  e_d_INPUT_SPINNOR_1, 
  e_d_INPUT_SPINNOR_2, 
  e_d_INPUT_SPINNOR_3, 
  e_d_INPUT_HNEXT, 
  e_d_INPUT_LAST
};
enum e_d_IO {
  e_d_IO_T, 
  e_d_IO_X, 
  e_d_IO_Y, 
  e_d_IO_Z, 
  e_d_IO_VX, 
  e_d_IO_VY, 
  e_d_IO_VZ, 
  e_d_IO_SPINNOR_0, 
  e_d_IO_SPINNOR_1, 
  e_d_IO_SPINNOR_2, 
  e_d_IO_SPINNOR_3, 
  e_d_IO_RED_VX, 
  e_d_IO_RED_VY, 
  e_d_IO_RED_VZ,  
  e_d_IO_AX, 
  e_d_IO_AY, 
  e_d_IO_AZ, 
  e_d_IO_DDT_SPINNOR_0, 
  e_d_IO_DDT_SPINNOR_1, 
  e_d_IO_DDT_SPINNOR_2, 
  e_d_IO_DDT_SPINNOR_3, 
  e_d_IO_SCAL_X, 
  e_d_IO_SCAL_Y, 
  e_d_IO_SCAL_Z, 
  e_d_IO_SCAL_VX, 
  e_d_IO_SCAL_VY, 
  e_d_IO_SCAL_VZ, 
  e_d_IO_SCAL_SPINNOR_0, 
  e_d_IO_SCAL_SPINNOR_1, 
  e_d_IO_SCAL_SPINNOR_2, 
  e_d_IO_SCAL_SPINNOR_3,
  e_d_IO_ERR_X, 
  e_d_IO_ERR_Y, 
  e_d_IO_ERR_Z, 
  e_d_IO_ERR_VX, 
  e_d_IO_ERR_VY, 
  e_d_IO_ERR_VZ, 
  e_d_IO_ERR_SPINNOR_0, 
  e_d_IO_ERR_SPINNOR_1, 
  e_d_IO_ERR_SPINNOR_2, 
  e_d_IO_ERR_SPINNOR_3,   
  e_d_IO_BX, 
  e_d_IO_BY, 
  e_d_IO_BZ, 
  e_d_IO_dB_XDX, 
  e_d_IO_dB_XDY, 
  e_d_IO_dB_XDZ, 
  e_d_IO_dB_YDX, 
  e_d_IO_dB_YDY, 
  e_d_IO_dB_YDZ, 
  e_d_IO_dB_ZDX, 
  e_d_IO_dB_ZDY, 
  e_d_IO_dB_ZDZ, 
  e_d_IO_POLARIZATION, 
  e_d_IO_HNEXT, 
  e_d_IO_SX, 
  e_d_IO_SY, 
  e_d_IO_SZ, 
  // e_d_IO_EPSILON_MAX_XV,// .([^=]*)=([^=]*)\; \t([^=]*) = ([^=]*)\; \t\2 = \1\;
  // e_d_IO_ERROR_XV, 
  // e_d_IO_HNEXT_XV_PGROW_BOUNDED, 
  // e_d_IO_HNEXT_XV_PGROW_UNBOUNDED, 
  // e_d_IO_HNEXT_XV_PSHRNK_BOUNDED, 
  // e_d_IO_HNEXT_XV_PSHRNK_UNBOUNDED, 
  // e_d_IO_HNEXT_XV, 
  // e_d_IO_EPSILON_MAX_S, 
  // e_d_IO_ERROR_S, 
  // e_d_IO_HNEXT_S_PGROW_BOUNDED, 
  // e_d_IO_HNEXT_S_PGROW_UNBOUNDED, 
  // e_d_IO_HNEXT_S_PSHRNK_BOUNDED, 
  // e_d_IO_HNEXT_S_PSHRNK_UNBOUNDED, 
  // e_d_IO_HNEXT_S,
  // e_d_IO_HCURRENT, 
  // e_d_IO_EXTRA_0, 
  // e_d_IO_EXTRA_1, 
  // e_d_IO_EXTRA_2, 
  // e_d_IO_EXTRA_3, 
  e_d_IO_LAST
};
enum e_d_IO_INT {
  e_d_IO_INT_RETURN_VALUE_XV, 
  e_d_IO_INT_RETURN_VALUE_S, 
  e_d_IO_INT_ERROR, 
  e_d_IO_INT_THREAD,
  e_d_IO_INT_RECORD,
  e_d_IO_INT_RKQS_STEPS, 
  e_d_IO_INT_RKQS_ERROR,
  e_d_IO_INT_LAST
}; 
enum e_d_CONST {
  e_d_CONST_tframe, 
  e_d_CONST_tframe_SPIN, 
  e_d_CONST_eps, 
  e_d_CONST_eps_SPIN, 
  e_d_CONST_h1, 
  e_d_CONST_h1_SPIN, 
  e_d_CONST_hmin, 
  e_d_CONST_hmin_SPIN, 
  e_d_CONST_def_SCALE, 
  e_d_CONST_def_SCALE_SPIN, 
  e_d_CONST_def_TIME_STEP_H, 
  e_d_CONST_def_TIME_STEP_MIN, 
  e_d_CONST_def_TIME_STEP_MAX, 
  e_d_CONST_def_POS_X_TEST_NEUTRON, 
  e_d_CONST_def_POS_Y_TEST_NEUTRON, 
  e_d_CONST_def_POS_Z_TEST_NEUTRON, 
  e_d_CONST_def_VEL_X_TEST_NEUTRON, 
  e_d_CONST_def_VEL_Y_TEST_NEUTRON, 
  e_d_CONST_def_VEL_Z_TEST_NEUTRON, 
  e_d_CONST_def_ACCEL_X_CONST_ACCEL, 
  e_d_CONST_def_ACCEL_Y_CONST_ACCEL, 
  e_d_CONST_def_ACCEL_Z_CONST_ACCEL, 
  e_d_CONST_def_SAFETY, 
  e_d_CONST_def_PGROW, 
  e_d_CONST_def_PSHRNK, 
  e_d_CONST_def_ERRCON, 
  e_d_CONST_def_MAXERR, 
  e_d_CONST_def_TINY, 
  e_d_CONST_def_SAFETY1, 
  e_d_CONST_def_PGROW1, 
  e_d_CONST_def_PSHRNK1, 
  e_d_CONST_def_ERRCON1, 
  e_d_CONST_def_TINY1, 
  e_d_CONST_def_MAXERR1, 
  e_d_CONST_def_TMAX, 
  e_d_CONST_def_MASS, 
  e_d_CONST_def_MOMENT, 
  e_d_CONST_def_MOMENT_DIV_MASS, 
  e_d_CONST_def_PI, 
  e_d_CONST_def_MU, 
  e_d_CONST_def_HBAR, 
  e_d_CONST_def_pos_BASE, 
  e_d_CONST_def_vel_BASE, 
  e_d_CONST_def_CORRECTIVE_FACTOR_SPIN, 
  e_d_CONST_def_START_SPIN_X, 
  e_d_CONST_def_START_SPIN_Y, 
  e_d_CONST_def_START_SPIN_Z, 
  e_d_CONST_def_HALBACH_NODES, 
  e_d_CONST_def_HALBACH_RADIUS, 
  e_d_CONST_def_HALBACH_CIRCUMFERENCE, 
  e_d_CONST_def_HALBACH_WIDTH, 
  e_d_CONST_def_HALBACH_K, 
  e_d_CONST_def_HALBACH_MAX_TESLA, 
  e_d_CONST_def_GRAVITY, 
  e_d_CONST_def_SPRING, 
  e_d_CONST_def_DISTANCE_BETWEEN_COILS, 
  e_d_CONST_def_CURRENT_ANTI_HH, 
  e_d_CONST_def_AM, 
  e_d_CONST_def_NDIV, 
  e_d_CONST_def_EPS, 
  e_d_CONST_def_RNMX, 
  e_d_CONST_guide_1_radius, 
  e_d_CONST_DEFAULT_X, 
  e_d_CONST_DEFAULT_Y, 
  e_d_CONST_DEFAULT_Z, 
  e_d_CONST_RF_BFIELD_MAG, 
  e_d_CONST_LAST
};
enum e_d_CONST_INT {
  e_d_CONST_INT_numRecordsPerUpdate,
  e_d_CONST_INT_numCyclesPerRecord,
  e_d_CONST_INT_FLAG_GRAVITY, 
  e_d_CONST_INT_FLAG_SPRING, 
  e_d_CONST_INT_FLAG_MAGNETIC, 
  e_d_CONST_INT_FLAG_RF, 
  e_d_CONST_INT_def_CUDA_Mag, 
  e_d_CONST_INT_def_CUDA_dB, 
  e_d_CONST_INT_def_CUDA_derivs_6, 
  e_d_CONST_INT_def_PERFECT_POLARIZATION,
  e_d_CONST_INT_def_SPIN_INTEGRATOR_FLAG, 
  e_d_CONST_INT_def_MAXSTP, 
  e_d_CONST_INT_def_MAXSTP1, 
  e_d_CONST_INT_def_FLAG_TEST_NEUTRON, 
  e_d_CONST_INT_def_CONST_ACCEL, 
  e_d_CONST_INT_def_NMAX, 
  e_d_CONST_INT_def_IA, 
  e_d_CONST_INT_def_IM, 
  e_d_CONST_INT_def_IQ, 
  e_d_CONST_INT_def_IR, 
  e_d_CONST_INT_def_NTAB, 
  e_d_CONST_INT_DIM_0_EXP, 
  e_d_CONST_INT_DIM_1_EXP, 
  e_d_CONST_INT_DIM_2_EXP, 
  e_d_CONST_INT_DIM_BFIELD_FLAG, 
  e_d_CONST_INT_DIM_0, 
  e_d_CONST_INT_DIM_1, 
  e_d_CONST_INT_DIM_2, 
  e_d_CONST_INT_numThreadsPerBlock_EXP, 
  e_d_CONST_INT_numRecordsPerThread_EXP, 
  e_d_CONST_INT_numBlocks_EXP, 
  e_d_CONST_INT_numRecords_EXP,
  e_d_CONST_INT_numThreads_EXP,
  e_d_CONST_INT_numThreadsPerBlock, 
  e_d_CONST_INT_numBlocks, 
  e_d_CONST_INT_numRecordsPerThread, 
  e_d_CONST_INT_numRecords, 
  e_d_CONST_INT_numThreads, 
  e_d_CONST_INT_numRecordsPerReverse, 
  e_d_CONST_INT_numRecordsPerReverse_SPIN, 
  e_d_CONST_INT_FLAG_CLASSICAL_SPIN, 
  e_d_CONST_INT_LAST
};
enum e_d_IO_DERIVED { 
  e_d_IO_DERIVED_VX_SANE_3, 
  e_d_IO_DERIVED_VY_SANE_3, 
  e_d_IO_DERIVED_VZ_SANE_3, 
  e_d_IO_DERIVED_AX_SANE_3, 
  e_d_IO_DERIVED_AY_SANE_3, 
  e_d_IO_DERIVED_AZ_SANE_3, 
  e_d_IO_DERIVED_VX_SANITY_ERROR_3, 
  e_d_IO_DERIVED_VY_SANITY_ERROR_3, 
  e_d_IO_DERIVED_VZ_SANITY_ERROR_3, 
  e_d_IO_DERIVED_AX_SANITY_ERROR_3, 
  e_d_IO_DERIVED_AY_SANITY_ERROR_3, 
  e_d_IO_DERIVED_AZ_SANITY_ERROR_3, 
  e_d_IO_DERIVED_PE_GRAVITATIONAL, 
  e_d_IO_DERIVED_PE_MAGNETIC, 
  e_d_IO_DERIVED_PE_SPRING, 
  e_d_IO_DERIVED_KE, 
  e_d_IO_DERIVED_PE, 
  e_d_IO_DERIVED_HAMILTONIAN,
  e_d_IO_DERIVED_ABS_DELTA_PE_GRAVITATIONAL, 
  e_d_IO_DERIVED_ABS_DELTA_PE_MAGNETIC, 
  e_d_IO_DERIVED_ABS_DELTA_PE_SPRING, 
  e_d_IO_DERIVED_ABS_DELTA_KE, 
  e_d_IO_DERIVED_ABS_DELTA_PE, 
  e_d_IO_DERIVED_ABS_DELTA_HAMILTONIAN, 
  e_d_IO_DERIVED_ABS_DELTA_MANUAL_HAMILTONIAN, 
  e_d_IO_DERIVED_SCALED_DELTA_PE_GRAVITATIONAL, 
  e_d_IO_DERIVED_SCALED_DELTA_PE_MAGNETIC, 
  e_d_IO_DERIVED_SCALED_DELTA_PE_SPRING, 
  e_d_IO_DERIVED_SCALED_DELTA_KE, 
  e_d_IO_DERIVED_SCALED_DELTA_PE, 
  e_d_IO_DERIVED_SCALED_DELTA_HAMILTONIAN, 
  e_d_IO_DERIVED_LAST
};
enum e_d_IO_DERIVED_INT {
  e_d_IO_DERIVED_INT_LAST
};

enum e_d_IO_BFIELD_ACCEL{
  e_d_IO_BFIELD_ACCEL_X, 
  e_d_IO_BFIELD_ACCEL_Y, 
  e_d_IO_BFIELD_ACCEL_Z, 
   e_d_IO_BFIELD_ACCEL_VX,
  e_d_IO_BFIELD_ACCEL_VY,
  e_d_IO_BFIELD_ACCEL_VZ,
  e_d_IO_BFIELD_ACCEL_AX, 
  e_d_IO_BFIELD_ACCEL_AY, 
  e_d_IO_BFIELD_ACCEL_AZ, 
  e_d_IO_BFIELD_ACCEL_BX, 
  e_d_IO_BFIELD_ACCEL_BY, 
  e_d_IO_BFIELD_ACCEL_BZ, 
  e_d_IO_BFIELD_ACCEL_dB_XDX, 
  e_d_IO_BFIELD_ACCEL_dB_XDY, 
  e_d_IO_BFIELD_ACCEL_dB_XDZ, 
  e_d_IO_BFIELD_ACCEL_dB_YDX, 
  e_d_IO_BFIELD_ACCEL_dB_YDY, 
  e_d_IO_BFIELD_ACCEL_dB_YDZ, 
  e_d_IO_BFIELD_ACCEL_dB_ZDX, 
  e_d_IO_BFIELD_ACCEL_dB_ZDY, 
  e_d_IO_BFIELD_ACCEL_dB_ZDZ, 
  e_d_IO_BFIELD_ACCEL_LAST
};
enum e_d_IO_BFIELD{
  // e_d_IO_BFIELD_THETA, 
  // e_d_IO_BFIELD_RHO, 
  // e_d_IO_BFIELD_ZETA, 
  e_d_IO_BFIELD_X, 
  e_d_IO_BFIELD_Y, 
  e_d_IO_BFIELD_Z, 
  e_d_IO_BFIELD_BX, 
  e_d_IO_BFIELD_BY, 
  e_d_IO_BFIELD_BZ, 
  e_d_IO_BFIELD_BLOCK_ID_X, 
  e_d_IO_BFIELD_BLOCK_ID_Y, 
  e_d_IO_BFIELD_BLOCK_ID_Z, 
  e_d_IO_BFIELD_GRID_DIM_X, 
  e_d_IO_BFIELD_GRID_DIM_Y, 
  e_d_IO_BFIELD_GRID_DIM_Z, 
  e_d_IO_BFIELD_THREAD_ID_X, 
  e_d_IO_BFIELD_THREAD_ID_Y, 
  e_d_IO_BFIELD_THREAD_ID_Z, 
  e_d_IO_BFIELD_BLOCK_DIM_X, 
  e_d_IO_BFIELD_BLOCK_DIM_Y, 
  e_d_IO_BFIELD_BLOCK_DIM_Z, 
  e_d_IO_BFIELD_RECORD, 
  e_d_IO_BFIELD_LAST
};

#endif

