#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <sstream>
#include <iostream>
#include <ctime>
#include <iomanip>
#include <cmath>
#include <limits>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <time.h>
// #include <casssert.h>

using namespace std;

#include "UCN_CUDA_WRAPPER.h"
#include "UCN_RUN.h"
#include "UCN_STRING.h"

// c_UCN_INSTANT(double *vd_param_XVS, double *vd_param_DXVS_DT, double *vd_param_BFIELD)
// {
	// for(int i = 0; i<10; i++) vd_XVS[i] = *vd_param_XVS[i];
	// for(int i = 0; i<10; i++) vd_DXVS_DT[i] = *vd_param_DXVS_DT[i];
	// for(int i = 0; i<3; i++) vd_BFIELD[i] = vd_param_BFIELD[i];
// }

double vd_a2_RANDOM[128][6] = {
	{0.63841834800934425013, 0.24218077472939325805, 0.84920371375485116130, 0.57946925060834313529, 0.46399088137486155898, 0.37262712349491685418},
	{0.87740377068432569905, 0.14928775833919212385, 0.20254754728165205915, 0.65173658487452770307, 0.27881623032135965332, 0.18382511971073276644},
	{0.80730128907310875482, 0.13669714338069020840, 0.11686787895492568679, 0.98603433088487469156, 0.87809916835686589498, 0.47800034954003672896},
	{0.08576647007548506903, 0.68586316887948315356, 0.29442233769794807491, 0.77774826119715350225, 0.39241971620952223704, 0.78605945687280340970},
	{0.49966369385440063366, 0.75779749922355832770, 0.86057892649567778287, 0.73740179513659636131, 0.02006423085505596278, 0.33532873115761772778},
	{0.50201407475437010309, 0.38302996312525177248, 0.14179606350755933291, 0.41667766118738218360, 0.63441858119823566141, 0.94209801543164620641},
	{0.16670837897524879801, 0.36979685459873078657, 0.60799864282102194477, 0.64315552734900301626, 0.44545865207019329147, 0.84833152496663709408},
	{0.27944361503523954259, 0.62224274195697541500, 0.65293743158317810556, 0.28190422756797327677, 0.85381744495821728678, 0.81281419370675469509},
	{0.94491950882786036998, 0.64284867769349331726, 0.43419623019827976273, 0.33096833723975123943, 0.88231716614045727035, 0.27555828441710217706},
	{0.47311734917299177829, 0.69736875882921964057, 0.93417169721812091555, 0.39187979066530090279, 0.94393911407337655794, 0.52819962087590645659},
	{0.53704391371547702751, 0.25819871671037377474, 0.25534559282922357374, 0.51248458783431648462, 0.20902325324384759814, 0.07117396667196837268},
	{0.49928394299588432490, 0.92902527924520445214, 0.40602344066886528466, 0.05974849230821831104, 0.86516811576984826284, 0.24613312584499885514},
	{0.30228949863262307871, 0.35422390728064201806, 0.88923113723177700609, 0.46061639466983961888, 0.86000652148382274795, 0.85525016422430364387},
	{0.42388853616674971337, 0.72329039585528657379, 0.92684321445603790600, 0.53607035316022200169, 0.93537445030533275391, 0.96845025208539464672},
	{0.68511947302810023982, 0.78242340954642230858, 0.03333327671885671064, 0.18102689147842824426, 0.15606788615808068807, 0.34971413368542726635},
	{0.96323344315983131948, 0.12527011268044926523, 0.24534875381967659616, 0.59888049381153449279, 0.26534031441268207085, 0.06258149182374697311},
	{0.83949971633681838509, 0.66325876595101032851, 0.37053613195791764004, 0.51395627865656093310, 0.02599523132755621143, 0.42352493799613795940},
	{0.00310969012848545699, 0.65617124930437819679, 0.71908372559963775049, 0.31521112172664143675, 0.03649333443513159003, 0.65740509251643249252},
	{0.62704823436348085576, 0.26682307742039793697, 0.49050584311702442080, 0.47833554076796974487, 0.09208117604667649466, 0.82683804450209194512},
	{0.39514105837448765735, 0.88167649591168339089, 0.36879868392848016167, 0.02119431335051638814, 0.43440168285291068401, 0.78812331585387325761},
	{0.91499995125046665701, 0.06568594437223838271, 0.37128330446259477719, 0.41095314454094405541, 0.43160704697476256116, 0.77556693127890778058},
	{0.59710621463654474447, 0.28745498302752216245, 0.23297835150719009442, 0.43961601206153243222, 0.04992154987230631027, 0.80616835894265831422},
	{0.73440800018200080498, 0.90706714235159774102, 0.94531523734522706965, 0.15359167063464463550, 0.46777700699265763635, 0.20609353158130620948},
	{0.36622319836185213066, 0.95865056038707049250, 0.30495259962539054010, 0.69018917221201307003, 0.19047657883447135905, 0.38794935538333623618},
	{0.63596270679095016093, 0.92824372321757550626, 0.71654783404050331548, 0.44719386227155086030, 0.62707792952571126832, 0.41005899405605534130},
	{0.81116717010872676641, 0.69796788641646117969, 0.03973523409326246176, 0.15584751572025254666, 0.87399026831113135111, 0.80512914851127406892},
	{0.96627678540838399556, 0.08898672419419138515, 0.24142773086869536440, 0.14793212445696284970, 0.99897492410739396460, 0.27660858144021731020},
	{0.46569953204586522214, 0.73536819473879376186, 0.66526525365794889489, 0.36032364061584379561, 0.70667011776253395729, 0.86547251181756314987},
	{0.61823098495920290930, 0.33259131736899004775, 0.36639820079715145001, 0.12772272564859352444, 0.01422721654024531858, 0.05923892898714108929},
	{0.56964557805619494961, 0.31133029496329077971, 0.66449826677887611104, 0.20158623878652480926, 0.38491275414119232161, 0.00203262582005876449},
	{0.05961926707909161593, 0.10266825764820242524, 0.17003742690305152035, 0.49149571935862950351, 0.00724082257454599824, 0.88657196510634571741},
	{0.33026253668510084338, 0.00207520919707474697, 0.16516851276908109262, 0.97068237952197910994, 0.26380660601853180919, 0.06240065565282615885},
	{0.03241638477554548649, 0.68175678489601061232, 0.27209292164809395168, 0.00995741119270380333, 0.07770192497046838902, 0.68710421704860256528},
	{0.66736881634773113849, 0.96043618247206572625, 0.05441903723436462146, 0.20123120404094476179, 0.08946610610517918409, 0.62714683970102393816},
	{0.91009446961786866665, 0.01917724398183812753, 0.39777426360487575909, 0.46787893524167974343, 0.28149008940793909260, 0.86000657654346703665},
	{0.39294875130783196036, 0.30812428760694030564, 0.37454447604934376834, 0.45304470126158043726, 0.91428802403550059820, 0.02941565474198267866},
	{0.76989913033188914574, 0.87145879444067256814, 0.72553168364681878760, 0.36575931842170857025, 0.06173689146541707268, 0.53580031259191510655},
	{0.33482257995590347158, 0.99265260575573290981, 0.65677738820006690687, 0.23818756696307785789, 0.46361016820544675655, 0.23992546031243055780},
	{0.10362783956301040709, 0.37601379864907870853, 0.01376248392294487549, 0.72939734378145995253, 0.76598594310399750755, 0.03313542203053618270},
	{0.13665904998913162953, 0.01854071811872816907, 0.17138173079956381605, 0.97795203970965797954, 0.34204755522833257477, 0.31690042660492387269},
	{0.34982080630731323820, 0.56412372996120760146, 0.11626147405282979733, 0.71494244489512184547, 0.37197737468790875154, 0.75580785956941651963},
	{0.52955306979110906976, 0.32888920326227854305, 0.53433496901457824259, 0.33253384114875137666, 0.82642113229018107144, 0.41697755852891599930},
	{0.83053454791546260027, 0.78158642771086036776, 0.98720706808572702694, 0.89260177808834634948, 0.23153912866606902297, 0.11486527042944621615},
	{0.37905657153460911063, 0.40687509744475316108, 0.12337094919439826033, 0.43828705702146876234, 0.83085157161655756969, 0.31844740949188841359},
	{0.17168701175151024023, 0.02586292615669931221, 0.61410324451271506368, 0.79598636848626610122, 0.47567275615191974910, 0.14822501543658223104},
	{0.15141421815794877072, 0.71584251844528226755, 0.78494776213851088734, 0.25819493400569685089, 0.66072554742172923871, 0.98071877446368372710},
	{0.80855632205441556104, 0.58313182131729472365, 0.35786429028753201711, 0.30306177658085754171, 0.38158490432775452678, 0.00281537836240878433},
	{0.59074458501559191076, 0.11401251260616826781, 0.06992302389246105688, 0.81709295689049064222, 0.28737396135123729513, 0.53088132150539992251},
	{0.84356046849138684048, 0.10888923450357061765, 0.07017247968262607296, 0.48834591381757252533, 0.08857752058908984376, 0.64351248626802506690},
	{0.24010609650903117193, 0.63689743672774896143, 0.61383504981861332014, 0.64718581230575368494, 0.11046058493822094257, 0.84429541497533942431},
	{0.08272718133682615763, 0.88058237976287440900, 0.74751665697775010653, 0.88996572422473185040, 0.16138060015072175519, 0.83526500684725195511},
	{0.62307474114246083848, 0.57042160481433313279, 0.86872243410612760384, 0.37452899920428898629, 0.88084654948327358851, 0.58370529976040781188},
	{0.66819998950277752804, 0.63776978590187237449, 0.82381440782770514798, 0.77444426529149972121, 0.27754355942658595638, 0.58971658787098147275},
	{0.79844261716721904283, 0.73375513620997103787, 0.57149099546318757887, 0.57447692120496134372, 0.38826141798334225922, 0.87613540101143729386},
	{0.41559289065526361050, 0.26463665202567473937, 0.30428105759243067399, 0.77691723987192814928, 0.44840068958379283872, 0.45047949537102602078},
	{0.23546764554239364099, 0.59109385190221639175, 0.33140707090893673721, 0.51076503713234074370, 0.12966933220749445398, 0.57958690869797634709},
	{0.68504310630037112847, 0.31222781689984879686, 0.93636146074203744463, 0.85902365709208984841, 0.39642531508112183427, 0.28432879528811592205},
	{0.63895741399806500141, 0.68788867571711925999, 0.19195933855241902741, 0.86083783972121841525, 0.00279039964960744754, 0.82793511708503010724},
	{0.33095304533805043254, 0.33167170167281228599, 0.75766699599202729076, 0.91368032714292617896, 0.08821699069365716662, 0.45957580858632812820},
	{0.47870684532622305669, 0.62729312739932847797, 0.28900123424633167563, 0.07777140286139771562, 0.07475169650205326070, 0.85250380902194983794},
	{0.07957910546013178492, 0.20828361027635345335, 0.92867717064615016137, 0.96256337242420867234, 0.32938520659944748332, 0.31588565804927960126},
	{0.09244864610286295970, 0.63114260153684885647, 0.31334701341463053496, 0.66052893880108645072, 0.81416985502384290027, 0.82241243482891876467},
	{0.29201188090545595226, 0.11119997827997813688, 0.54445002808777532935, 0.31961574848083856582, 0.10473648977517620421, 0.27061924542161503640},
	{0.07171161454780464654, 0.56159613049203253799, 0.93699232574741390608, 0.04524773803600148755, 0.91247469958301408224, 0.29839604078609878515},
	{0.85780409924319276592, 0.85258121131492003603, 0.22943981706708707132, 0.39013146579731439940, 0.71914009534932873495, 0.92998094539977160363},
	{0.08132589199038272515, 0.51969847353458121064, 0.02524382124276398436, 0.18437221145737607471, 0.01844626487780511591, 0.48596575165704697331},
	{0.93346883450330485133, 0.33673022045113947915, 0.09296737778081398533, 0.05749433721958060637, 0.80375099542253552995, 0.28360477458413001145},
	{0.20708595067557855393, 0.77619368660337479069, 0.45587590775543438752, 0.65323182847014549985, 0.14995366826043168341, 0.79853776067571550078},
	{0.28336534047638164754, 0.79608527009360959297, 0.20270624277845445342, 0.95350249229969660301, 0.68754540494951213660, 0.32089437678513012353},
	{0.17414674778746476493, 0.22578877108808263627, 0.26782064456461672744, 0.00366799501275671008, 0.33100262592946467384, 0.87023221810424912177},
	{0.02151502908518447819, 0.78509390621804609655, 0.12474372755429743720, 0.92735107928275725907, 0.29284108175193377569, 0.58139168100063606326},
	{0.65641717775250571865, 0.62746526506321584507, 0.82643851666764789052, 0.24893970169983113678, 0.40462675434260145497, 0.24401260962466747557},
	{0.66266908141988640924, 0.43477295797254885487, 0.52244782287816853419, 0.12850199373917240428, 0.27082506120119231683, 0.08864799165722262819},
	{0.22690796607835619319, 0.19497239184117516662, 0.36942924784584140016, 0.79362559236908266582, 0.40598042346778366806, 0.76658712213468874502},
	{0.29149618235152668558, 0.43679647392002206439, 0.78512959559508777891, 0.55143525822990310801, 0.75022246417705604590, 0.74426588172379142123},
	{0.64029008538658185010, 0.88451132552676733241, 0.13161586535586543375, 0.32256278527648095641, 0.77636662841169883298, 0.89173043747699644481},
	{0.91277286573684379997, 0.31245476158169099250, 0.85196052066007541144, 0.37048968143979906650, 0.52764618239114707354, 0.23100248520639553476},
	{0.48228913968091234924, 0.18040759196734034807, 0.35361321154205312560, 0.30544387621500270678, 0.80343203077129399221, 0.50634278557249481107},
	{0.56325855150000769971, 0.86065254798359076029, 0.78363939407760120526, 0.92032715673124527128, 0.24370234568874296981, 0.38610419350044306313},
	{0.82346608526168558592, 0.22424892042537576272, 0.17943353078867716530, 0.23466257354140054582, 0.57400791471724617504, 0.04729209886537128143},
	{0.72507508656939991137, 0.07521716575550058993, 0.27787730965347630350, 0.41724877141899041559, 0.96150920886029984978, 0.04016922310510519505},
	{0.03903668945984932100, 0.97943057712910727795, 0.92831268878458963913, 0.45826549200640349412, 0.31486015374565935895, 0.70779547520861540000},
	{0.34366975504591283059, 0.92211687646841661867, 0.03598267196793274269, 0.86034575687998288117, 0.36303727896740751807, 0.08840223191287333598},
	{0.73411971125236981611, 0.35561697603632146398, 0.34203374390011148132, 0.42400880266496633382, 0.64806167607346040728, 0.59102542173669730169},
	{0.41270827809606868911, 0.62717623835834343594, 0.42981269903876532727, 0.27377146642879902781, 0.71554424529547098286, 0.27055607636981955191},
	{0.48562219964643702010, 0.22691582263288578988, 0.20482647043658678330, 0.09521962734173347465, 0.75833272500415834912, 0.43360546584031058752},
	{0.26981557611479231683, 0.21256265134802038761, 0.62131238106276896542, 0.54642760488111689109, 0.64183089681788332790, 0.56145480873396418912},
	{0.97076434427753912812, 0.99520447856490671003, 0.95051419904518104787, 0.37693353654661225703, 0.11541116350984257975, 0.86884836616229348729},
	{0.49389876846881845913, 0.21302166962364455120, 0.92056905414427591363, 0.34330657319949901732, 0.36245937034488446482, 0.43823688023874373600},
	{0.30105961245477933758, 0.38170889385089421284, 0.18976131773660713810, 0.61963871358185284676, 0.84096073558367673455, 0.74670420498681161204},
	{0.76709371737452480560, 0.33451031063985922752, 0.59843767213875810299, 0.42693340861521861730, 0.36087572212658629090, 0.58377694893906320711},
	{0.17087350361103418943, 0.01640049826557123253, 0.39652895793846888226, 0.66952735089127753915, 0.28644950438335735014, 0.04129418083721259719},
	{0.51023652341770347255, 0.10192365695165041375, 0.80137546512024284529, 0.45334432937722883516, 0.91744190246144392557, 0.66671345536246605986},
	{0.56884773724971416367, 0.53389945817273468295, 0.49745812440294478314, 0.82295212073922657505, 0.68297074671881995429, 0.22081566765823692667},
	{0.15417561929163440123, 0.64223218903389612911, 0.32643750424335113969, 0.44653713197802500632, 0.67666699977856824109, 0.67868622993352279689},
	{0.32611778825231664707, 0.22857506147641063904, 0.58559298253212641674, 0.58656856816315445334, 0.28227936214408688733, 0.21893436996571001545},
	{0.69513379465380359526, 0.49263564355486552610, 0.13395064379520613165, 0.11126952198993164214, 0.45736213441250902759, 0.45463646638142389877},
	{0.20551731032586584562, 0.83332035027898991971, 0.84713523738752816199, 0.62705598461549707159, 0.85492383273387863532, 0.34992252043105775908},
	{0.35000247896629445681, 0.31600176819163493168, 0.50018189800230247724, 0.78803422704567946628, 0.65180015755675198027, 0.40725511914406698559},
	{0.85863369686960208451, 0.16049736994137186148, 0.36522566668890854592, 0.53022006671920014421, 0.52578335103800828306, 0.76037750633599147857},
	{0.25429438759033234959, 0.67703020534231741151, 0.85898068034078993120, 0.26180992420222436333, 0.36862031145240124890, 0.48809242022982530069},
	{0.18161317655589931158, 0.86396733185079888141, 0.13330020925056928224, 0.81420819672557715994, 0.89005922659003530765, 0.19478067805141941167},
	{0.54738250404518399794, 0.00464844983969139513, 0.95533243029293014658, 0.60726988055563345047, 0.19652586528230175886, 0.54308206724948992817},
	{0.77111170852785519704, 0.85803274398386980390, 0.11908866124246379923, 0.09753146334030294969, 0.85422607036766438752, 0.44321756196669178078},
	{0.75568624826334603186, 0.46923626969763381628, 0.22942137451479889927, 0.19744929946814349782, 0.95390093426077010993, 0.16386743970283244927},
	{0.16363554637690862723, 0.46908259715354164224, 0.60431729440814603896, 0.81199894803652246466, 0.31247109224660465649, 0.97130417600479125838},
	{0.03390723950828424861, 0.82653940172752219947, 0.00978984806333450362, 0.88787070072246708446, 0.37834287294049915380, 0.20087630890473883706},
	{0.02356830435379534047, 0.72338755467668638183, 0.82403193014316504337, 0.75497539370589614914, 0.24747810935022400289, 0.63887539698961026952},
	{0.11937194933298729464, 0.27222228601389165654, 0.99430389149399166457, 0.07061381118086826550, 0.65529687620273216930, 0.14300562215808852826},
	{0.50863219803157089273, 0.43664954098623386677, 0.52601839224015441396, 0.76803878875006300865, 0.05352034203464486548, 0.90392655783950420878},
	{0.19542037332852088932, 0.96766486850900653913, 0.93236837035871057759, 0.82670600985326449051, 0.26155078259336380572, 0.45934730182633784385},
	{0.48869840499266575591, 0.77979125557347166654, 0.13777124952176319867, 0.07810164133513690858, 0.52431048813394688022, 0.89437210910543075296},
	{0.27017456542907549686, 0.20891086663173678150, 0.61300189236544247946, 0.58543574893800128315, 0.53275574552693445935, 0.06789668339529091334},
	{0.71187189687448243701, 0.41805530198830220488, 0.56474438837037627149, 0.00585831492963278424, 0.73571736222165216753, 0.58566582058719111756},
	{0.83042530574247678521, 0.56086206904108414368, 0.35329437893852455134, 0.90522049105445631701, 0.20040870714224735044, 0.92716374424579192556},
	{0.57798899808082840513, 0.60155485433532165622, 0.65682839420877796445, 0.33011311464084925140, 0.30921256381645585676, 0.42880843131150612732},
	{0.69043699257665689446, 0.77681927813272140982, 0.47389328841288429634, 0.91095277327069990481, 0.09447244185924566132, 0.96847788878958434275},
	{0.08127508246271159197, 0.96182975871404945445, 0.53995081464325976309, 0.22488569681932936563, 0.65383565560815938147, 0.11896086180040805299},
	{0.92717678970950627715, 0.90286537448358016407, 0.69880800039064553869, 0.86705909191438172379, 0.97131381588419682587, 0.99283771536460822920},
	{0.48152331605782506729, 0.38120379010574247448, 0.33514049936503436414, 0.10962272913473731547, 0.05765394486256097082, 0.58554364690475953124},
	{0.90850326717803381349, 0.58339496175401849781, 0.50510052656708793110, 0.95324295056703717665, 0.27138546887137477411, 0.53633995989034104986},
	{0.01094951190355894255, 0.83010875387260441045, 0.52238467101257034466, 0.96829871857650603308, 0.56139776493448725265, 0.26926600076117741643},
	{0.92285292876780828245, 0.01484631276210642563, 0.26725682803864936337, 0.28150370964638112327, 0.92036599121456049856, 0.11248331259215012653},
	{0.38301085130924214388, 0.19862105266070533280, 0.50378825478837951353, 0.73142065650205565748, 0.08638186267463268751, 0.39829086731102742465},
	{0.58792174027132581378, 0.63899625295303425441, 0.09128624581388797855, 0.30499239495167161641, 0.06289181250890075292, 0.46627956756356261338},
	{0.93139692683619565540, 0.86883569779080339549, 0.66362076534216621466, 0.14455506686147619390, 0.31263059310678287805, 0.78685469132985497656},
	{0.53497528417245597769, 0.84893985501026875540, 0.80508959535267641444, 0.89125946951758316806, 0.29773113530053249836, 0.44989383937321354988},
	{0.02225604738364076155, 0.05602189395848840523, 0.08881953937988722024, 0.87124456613673035851, 0.00467137547365088656, 0.18617100103430952499}
};

int ipow(int base, int exp)
{
	int result = -1;
	if(exp<0) result = 0;
	else if(exp==0) result = 1;
	else if(exp>0)
	{
		result = 1;
		for(int i = exp; i>0; i--)
		{
				result *= base;
		}
	}
  return result;
}
// c_UCN_RUN_DATA fxn_PROXY_CONSTRUCTOR_c_UCN_RUN_DATA(
	// map<int, string> & r_m_vi_cstr_IO,
	// map<int, string> & r_m_vi_cstr_IO_INT,
	// map<int, string> & r_m_vi_cstr_CONST,
	// map<int, string> & r_m_vi_cstr_CONST_INT,
	// map<int, string> & r_m_vi_cstr_RKQS_ERROR,
	// map<int, double> & r_m_vi_CONST,
	// map<int, int> & r_m_vi_CONST_INT)
// {
	// const int numThreads_TEMP = r_m_vi_CONST_INT[e_d_CONST_INT_numThreads];
	// const int numRecordsPerThread_TEMP = r_m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread];
	// return c_UCN_RUN_DATA(
		// r_m_vi_cstr_IO,
		// r_m_vi_cstr_IO_INT,
		// r_m_vi_cstr_CONST,
		// r_m_vi_cstr_CONST_INT,
		// r_m_vi_cstr_RKQS_ERROR,
		// r_m_vi_CONST_INT,
		// r_m_vi_CONST,
		// numThreads_TEMP,
		// numRecordsPerThread_TEMP);
// }

c_UCN_RUN_DATA::c_UCN_RUN_DATA(
			
	map<int, string> & r_m_vi_cstr_IO,
	map<int, string> & r_m_vi_cstr_IO_INT,
	map<int, string> & r_m_vi_cstr_CONST,
	map<int, string> & r_m_vi_cstr_CONST_INT,
	map<int, string> & r_m_vi_cstr_RKQS_ERROR,
	map<int, int> & r_m_vi_CONST_INT,
	map<int, double> & r_m_vi_CONST,
	const int param_numThreads,
	const int param_numRecordsPerThread) :
	m_vi_cstr_IO(r_m_vi_cstr_IO),
	m_vi_cstr_IO_INT(r_m_vi_cstr_IO_INT),
	m_vi_cstr_CONST(r_m_vi_cstr_CONST),
	m_vi_cstr_CONST_INT(r_m_vi_cstr_CONST_INT),
	m_vi_cstr_RKQS_ERROR(r_m_vi_cstr_RKQS_ERROR),
	m_vi_CONST_INT(r_m_vi_CONST_INT),
	m_vi_CONST(r_m_vi_CONST),
	vci_numThreads(param_numThreads),
	vci_numRecordsPerThread(param_numRecordsPerThread),
	vci_numInts(param_numThreads*param_numRecordsPerThread*e_d_IO_INT_LAST),
	vci_numDoubles(param_numThreads*param_numRecordsPerThread*e_d_IO_LAST)
{
	
	// map<int, string> m_vi_cstr_IO = r_m_vi_cstr_IO;
	// map<int, string> m_vi_cstr_IO_INT = r_m_vi_cstr_IO_INT;
	// map<int, string> m_vi_cstr_CONST = r_m_vi_cstr_CONST;
	// map<int, string> m_vi_cstr_CONST_INT = r_m_vi_cstr_CONST_INT;
	// map<int, double> m_vi_CONST = r_m_vi_CONST;
	// map<int, int> m_vi_CONST_INT = r_m_vi_CONST_INT;
	
	time_t rawtime;
	struct tm * s_tm_timeinfo_INPUT;
	struct tm * s_tm_timeinfo_START;
	struct tm * s_tm_timeinfo_FINISH;
	
	// double param_CONST[e_d_CONST_LAST];
	// for(int i = 0; i<e_d_CONST_LAST; i++) param_CONST[i] = m_vi_CONST_INT[i];
	
	// int param_CONST_INT[e_d_CONST_INT_LAST];
	// for(int i = 0; i<e_d_CONST_LAST; i++) param_CONST[i] = m_vi_CONST_INT[i];
	
  // const int vci_numDoubles = m_vi_CONST_INT[e_d_CONST_INT_numRecords]*e_d_IO_LAST;
	// const int vci_numInts = m_vi_CONST_INT[e_d_CONST_INT_numRecords]*e_d_IO_INT_LAST;
	
	const int vci_numDoubleBytes = vci_numDoubles*sizeof(double);
	const int vci_numIntBytes = vci_numInts*sizeof(int);
	
	double vd_IO[vci_numDoubles];
	int vi_IO[vci_numInts];
	
	double vd_a1_PHI_SPIN_START[vci_numThreads];
	double vd_a1_THETA_SPIN_START[vci_numThreads];
	
	double h_CONST[e_d_CONST_LAST];
	int h_CONST_INT[e_d_CONST_INT_LAST];
	
	for(int k = 0; k<e_d_CONST_INT_LAST; k++)
	{
		h_CONST_INT[k] = m_vi_CONST_INT[k];
	}
	for(int k = 0; k<e_d_CONST_LAST; k++)
	{
		h_CONST[k] = m_vi_CONST[k];
	}
	printf("\n%d doubles and %d ints\n\n,",vci_numDoubles,vci_numInts);
	printf("\n%d double Bytes and %d int Bytes\n\n,",vci_numDoubleBytes,vci_numIntBytes);
	enum e_DATA {e_DATA_FAKE, e_DATA_CUDA, e_DATA_PREVIOUS, e_DATA_LAST};
	int e_v_DATA_OPTION = e_DATA_CUDA;
	if(e_v_DATA_OPTION==e_DATA_FAKE)
	{
		for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
		{
			for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
			{
				for(int k = 0; k<e_d_IO_INT_LAST; k++)
				{
					int vi_PLACEHOLDER_LOCAL = (i*m_vi_CONST[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_INT_LAST + j);
					vi_IO[vi_PLACEHOLDER_LOCAL] = 10000*i + 100*j + k;
				}
				for(int k = 0; k<e_d_IO_LAST; k++)
				{
					int vi_PLACEHOLDER_LOCAL = (i*m_vi_CONST[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_LAST + j);
					vd_IO[vi_PLACEHOLDER_LOCAL] = 10000*i + 100*j + k;
				}
			}
		}
	}
	else if(e_v_DATA_OPTION==e_DATA_CUDA)
	{
		
		srand (time(NULL));
		double vd_zoutafp =  1.7;
		double vd_zstart  = -.06;
		cout << "\nSTART OF CUDA DATA OPTION";
		for(int i = 0; i<vci_numThreads; i++)
		{
			
			int vi_THREAD_INT_OFFSET = i*e_d_IO_INT_LAST;
			int vi_THREAD_DOUBLE_OFFSET = i*e_d_IO_LAST;
			
			int vi_IO_THREAD_INT_OFFSET = i*vci_numRecordsPerThread*e_d_IO_INT_LAST;
			int vi_IO_THREAD_DOUBLE_OFFSET = i*vci_numRecordsPerThread*e_d_IO_LAST;
			double vd_RANDOM_0, vd_RANDOM_1, vd_RANDOM_2, vd_RANDOM_3, vd_RANDOM_4, vd_RANDOM_5;
			if(i<128)
			{
				vd_RANDOM_0 = vd_a2_RANDOM[i][0];
				vd_RANDOM_1 = vd_a2_RANDOM[i][1];
				vd_RANDOM_2 = vd_a2_RANDOM[i][2];
				vd_RANDOM_3 = vd_a2_RANDOM[i][3];
				vd_RANDOM_4 = vd_a2_RANDOM[i][4];
				vd_RANDOM_5 = vd_a2_RANDOM[i][5];
			}
			else
			{
				vd_RANDOM_0 = ( (rand() % 32767) / 32767.0);
				vd_RANDOM_1 = ( (rand() % 32767) / 32767.0);
				vd_RANDOM_2 = ( (rand() % 32767) / 32767.0);
				vd_RANDOM_3 = ( (rand() % 32767) / 32767.0);
				vd_RANDOM_4 = ( (rand() % 32767) / 32767.0);
				vd_RANDOM_5 = ( (rand() % 32767) / 32767.0);
			}
			double vd_R_TEMP = m_vi_CONST[e_d_CONST_guide_1_radius] * vd_RANDOM_0;
			double vd_PHI_TEMP = m_vi_CONST[e_d_CONST_def_PI] * vd_RANDOM_1;
			double vd_THETA_TEMP = 2.0 * m_vi_CONST[e_d_CONST_def_PI] * vd_RANDOM_2;
			double vd_PHI_R_TEMP = m_vi_CONST[e_d_CONST_def_PI] * vd_RANDOM_3;
			double vd_THETA_R_TEMP = 2.0 * m_vi_CONST[e_d_CONST_def_PI] * vd_RANDOM_4;
			double vd_SX_TEMP = cos(vd_THETA_TEMP)*cos(vd_PHI_TEMP);
			double vd_SY_TEMP = sin(vd_THETA_TEMP)*cos(vd_PHI_TEMP);
			double vd_SZ_TEMP = sin(vd_PHI_TEMP);
			double vd_xin = vd_R_TEMP * cos(vd_THETA_R_TEMP);
			double vd_yin = vd_R_TEMP * sin(vd_THETA_R_TEMP);
			double vd_xout = 0;
			double vd_yout = 0;
			double vd_range = sqrt( (vd_xout-vd_xin)*(vd_xout-vd_xin)
				+(vd_yout-vd_yin)*(vd_yout-vd_yin)
				+(vd_zoutafp-vd_zstart)*(vd_zoutafp-vd_zstart));
			double vd_V_TEMP = 7.0 * pow( vd_RANDOM_3, (1.0/3.0) ); 
			double vd_VX_TEMP = vd_V_TEMP * (vd_xout-vd_xin)/vd_range;
			double vd_VY_TEMP = vd_V_TEMP * (vd_yout-vd_yin)/vd_range;
			double vd_VZ_TEMP = vd_V_TEMP * (vd_zoutafp-vd_zstart)/vd_range;
			
			vd_a1_PHI_SPIN_START[i] = vd_PHI_TEMP;
			vd_a1_THETA_SPIN_START[i] = vd_THETA_TEMP;
			
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RETURN_VALUE_XV] = 0;
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RETURN_VALUE_S] = 0; 
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_ERROR] = 0;
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_THREAD] = i;
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RECORD] = 0;
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RKQS_STEPS] = 0;
			vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RKQS_ERROR] = 0;
			
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_T] = 0.0;
			
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_X] = vd_xin;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Y] = vd_yin;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Z] = vd_zstart;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VX] = vd_VX_TEMP;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VY] = vd_VY_TEMP;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VZ] = vd_VZ_TEMP;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_0] = sqrt(
				pow(vd_SX_TEMP, 2.0) + pow(vd_SY_TEMP, 2.0) + pow(vd_SZ_TEMP, 2.0));
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_1] = vd_SX_TEMP;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_2] = vd_SY_TEMP;
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_3] = vd_SZ_TEMP;
			
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_X] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_X];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_Y] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Y];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_Z] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Z];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_VX] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VX];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_VY] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VY];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_VZ] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VZ];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_SPINNOR_0] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_0];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_SPINNOR_1] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_1];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_SPINNOR_2] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_2];
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_CORRECT_SPINNOR_3] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_3];
			
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_X] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_Y] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_Z] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_VX] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_VY] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_VZ] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_0] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_1] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_2] = 0.0; 
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_3] = 0.0;
			
			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_HNEXT] = fmin(m_vi_CONST[e_d_CONST_h1], m_vi_CONST[e_d_CONST_h1_SPIN]);
			
			
// 			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SX] = vd_SX_TEMP; 
// 			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SY] = vd_SY_TEMP; 
//  			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SZ] = vd_SZ_TEMP; 
// 			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SX_CORRECT] = vd_SX_TEMP; 
// 			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SY_CORRECT] = vd_SY_TEMP; 
//  			vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SZ_CORRECT] = vd_SZ_TEMP; 
			
			printf("\nIO >>> OFFSET_INT:%d|OFFSET_DOUBLE:%d|ID:%d|RECORD:%d|TIME:%f|XYZ=(%f,%f,%f)|VEL=(%f,%f,%f)\nSPIN:(%f,%f,%f,%f)|HNEXT:%f",
				vi_IO_THREAD_INT_OFFSET,
				vi_IO_THREAD_DOUBLE_OFFSET,
				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_THREAD], 
				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RECORD], 
				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_T], 
				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_X], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Y], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Z], 
				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VX], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VY], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VZ], 
				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_0], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_1], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_2], vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_3], 
				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_HNEXT]);
		}
		for(int i = 0; i<vci_numDoubles; i++) v_IO.push_back(vd_IO[i]);
		for(int i = 0; i<vci_numInts; i++) v_IO_INT.push_back(vi_IO[i]);
		// fxn_FORMATTED_WRITE("tempo", true);
		// fxn_FORMATTED_WRITE_ARRAY(vd_IO, vi_IO, "tempo_a1", false);
		v_IO.clear();
		v_IO_INT.clear();
// 		double cast_vd_clock_t_T = 0.0;
// 		clock_t clock_t_START, clock_t_STOP;
// 				/* Start timer */
// 		assert((clock_t_START = clock())!=-1);

		/* Do lotsa fancy calculations */

		
		time(&rawtime);
		s_tm_timeinfo_START = gmtime ( &rawtime );
		GENERIC_WRAPPER_MULTI(
			h_CONST,
			h_CONST_INT,
			vd_IO,
			vi_IO);
		time(&rawtime);
		s_tm_timeinfo_FINISH = gmtime ( &rawtime );
		/* Stop timer */
// 		clock_t_STOP = clock();
// 		cast_vd_clock_t_T = (double) (clock_t_STOP-clock_t_START)/CLOCKS_PER_SEC;
// 
// 		printf("Run time: %f\n", cast_vd_clock_t_T);

// 		for(int i = 0; i<vci_numThreads; i++)
// 		{
// 			double vd_THETA_SPIN_START_CURRENT = vd_a1_THETA_SPIN_START[i];
// 			
// 			int vi_IO_THREAD_INT_OFFSET = 
// 				i*vci_numRecordsPerThread*e_d_IO_INT_LAST;
// 			int vi_IO_THREAD_DOUBLE_OFFSET = 
// 				i*vci_numRecordsPerThread*e_d_IO_LAST;
// 			
// 			for(int j = 0; j<vci_numRecordsPerThread; j++)
// 			{
// 				int vi_IO_THREAD_RECORD_INT_OFFSET = 
// 					vi_IO_THREAD_INT_OFFSET +
// 					j*e_d_IO_INT_LAST;
// 				int vi_IO_THREAD_RECORD_DOUBLE_OFFSET = 
// 					vi_IO_THREAD_DOUBLE_OFFSET +
// 					j*e_d_IO_LAST;
// 				
// 				double vd_THETA_SPIN_PRECESSED;
// 				double vd_TIME_CURRENT_PRECESS = vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_T];
// 				if((sin(vd_a1_PHI_SPIN_START[i])*1.0)>0) 
// 				{
// 					vd_THETA_SPIN_PRECESSED = 
// 						vd_THETA_SPIN_START_CURRENT + 
// 						vd_TIME_CURRENT_PRECESS*h_CONST[e_d_CONST_NEUTRON_GYROMAG_MOMENT];
// 					
// 				}
// 				else
// 				{
// 					vd_THETA_SPIN_PRECESSED = 
// 						vd_THETA_SPIN_START_CURRENT - 
// 						vd_TIME_CURRENT_PRECESS*h_CONST[e_d_CONST_NEUTRON_GYROMAG_MOMENT];
// 				}
// 				double vd_SX_TEMP = cos(vd_THETA_SPIN_PRECESSED)*cos(vd_a1_PHI_SPIN_START[i]);
// 				double vd_SY_TEMP = sin(vd_THETA_SPIN_PRECESSED)*cos(vd_a1_PHI_SPIN_START[i]);
// 				double vd_SZ_TEMP = sin(vd_a1_PHI_SPIN_START[i]);
// 				
// 				double vd_SPINNOR_0_TEMP = vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_SPINNOR_1]; 
// 				double vd_SPINNOR_1_TEMP = vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_SPINNOR_2]; 
// 				double vd_SPINNOR_2_TEMP = vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_SPINNOR_3]; 
// 				
// // 				vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_SX_CORRECT] = vd_SX_TEMP; 
// // 				vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_SY_CORRECT] = vd_SY_TEMP; 
// // 				vd_IO[vi_IO_THREAD_RECORD_DOUBLE_OFFSET + e_d_IO_SZ_CORRECT] = vd_SZ_TEMP; 
// 				
// 				double vd_DIFF_TEMP_0 = vd_SPINNOR_0_TEMP - vd_SX_TEMP;
// 				double vd_DIFF_TEMP_1 = vd_SPINNOR_1_TEMP - vd_SY_TEMP;
// 				double vd_DIFF_TEMP_2 = vd_SPINNOR_0_TEMP - vd_SZ_TEMP;
// 				
// // 				cout << "\nTHETA=" << vd_THETA_SPIN_PRECESSED;
// //  			cout << " CORRECT=(" << vd_SX_TEMP << "," << vd_SY_TEMP << "," << vd_SZ_TEMP << ")";
// // 				cout << " V ACTUAL=(" << vd_SPINNOR_0_TEMP << "," << vd_SPINNOR_1_TEMP << "," << vd_SPINNOR_2_TEMP << ")";
// // 				cout << " DIFF=(" << vd_DIFF_TEMP_0 << "," << vd_DIFF_TEMP_1 << "," << vd_DIFF_TEMP_2 << ")";;
// // 				cout << " @t=" << vd_TIME_CURRENT_PRECESS;
// 				
// 			}
// 		}
		for(int i = 0; i<vci_numDoubles; i++) v_IO.push_back(vd_IO[i]);
		for(int i = 0; i<vci_numInts; i++) v_IO_INT.push_back(vi_IO[i]);
		cout << "\n final = " << e_d_IO_LAST << "\nmain vector is of size = (" << v_IO.size() << "\\" << v_IO_INT.size() << ")";
	}
}

		// fxn_FORMATTED_WRITE_MINIMUM("UCN", true);
		
// 		fxn_FORMATTED_WRITE("UCN", true);
// 		if(m_vi_CONST_INT[e_d_CONST_INT_FLAG_REVERSE_CHECK]==1)
// 		{
// 			for(int i = 0; i<vci_numThreads; i++)
// 			{
// 				int vi_THREAD_INT_OFFSET = i*e_d_IO_INT_LAST;
// 				int vi_THREAD_DOUBLE_OFFSET = i*e_d_IO_LAST;
// 				
// 				int vi_IO_THREAD_INT_OFFSET_FINAL = (i*vci_numRecordsPerThread + (vci_numRecordsPerThread - 1))*e_d_IO_INT_LAST;
// 				int vi_IO_THREAD_DOUBLE_OFFSET_FINAL = (i*vci_numRecordsPerThread + (vci_numRecordsPerThread - 1))*e_d_IO_LAST;
// 				
// 				int vi_IO_THREAD_INT_OFFSET = i*vci_numRecordsPerThread*e_d_IO_INT_LAST;
// 				int vi_IO_THREAD_DOUBLE_OFFSET = i*vci_numRecordsPerThread*e_d_IO_LAST;
// 				
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RETURN_VALUE_XV] = vi_IO[vi_IO_THREAD_INT_OFFSET_FINAL + e_d_IO_INT_RETURN_VALUE_XV];
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RETURN_VALUE_S] = vi_IO[vi_IO_THREAD_INT_OFFSET_FINAL + e_d_IO_INT_RETURN_VALUE_S]; 
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_ERROR] = vi_IO[vi_IO_THREAD_INT_OFFSET_FINAL + e_d_IO_INT_ERROR];
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_THREAD] = vi_IO[vi_IO_THREAD_INT_OFFSET_FINAL + e_d_IO_INT_THREAD];
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RECORD] = 0;
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RKQS_STEPS] = vi_IO[vi_IO_THREAD_INT_OFFSET_FINAL + e_d_IO_INT_RKQS_STEPS];
// 				vi_IO[vi_IO_THREAD_INT_OFFSET + e_d_IO_INT_RKQS_ERROR] = vi_IO[vi_IO_THREAD_INT_OFFSET_FINAL + e_d_IO_INT_RKQS_ERROR];
// 				
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_T] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_T];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_X] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_X];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Y] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_Y];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_Z] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_Z];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VX] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_VX];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VY] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_VY];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_VZ] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_VZ];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_0] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SPINNOR_0];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_1] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SPINNOR_1];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_2] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SPINNOR_2];
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_3] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SPINNOR_3];
// 				
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_X] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_X]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_Y] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_Y]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_Z] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_Z]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_VX] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_VX]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_VY] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_VY]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_VZ] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_VZ]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_0] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_SPINNOR_0]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_1] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_SPINNOR_1]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_2] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_SPINNOR_2]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_ERR_SPINNOR_3] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_ERR_SPINNOR_3];
// 				
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_HNEXT] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_HNEXT];
// 				
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SX] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SX]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SY] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SY]; 
// 				vd_IO[vi_IO_THREAD_DOUBLE_OFFSET + e_d_IO_SZ] = vd_IO[vi_IO_THREAD_DOUBLE_OFFSET_FINAL + e_d_IO_SZ]; 
// 				
// 				h_CONST[e_d_CONST_h1] *= -1;
// 				h_CONST[e_d_CONST_h1_SPIN] *= -1;
// 			}
// 			
// 			GENERIC_WRAPPER_MULTI(
// 				h_CONST,
// 				h_CONST_INT,
// 				vd_IO,
// 				vi_IO);
// 			
// 			vector<int> v_IO_INT_TEMP;
// 			vector<double> v_IO_TEMP;
// 			
// 			for(int i = 0; i<vci_numInts; i++) v_IO_INT_TEMP.push_back(vi_IO[i]);
// 			for(int i = 0; i<vci_numDoubles; i++) v_IO_TEMP.push_back(vd_IO[i]);
// 			
// 			cout << "\nREVERSE_CHECK: final = " << e_d_IO_LAST << "\nmain vector is of size = (" << v_IO.size() << "\\" << v_IO_INT.size() << ")";
// 			
// 			vector<int> r_v_IO_INT_TEMP = v_IO_INT_TEMP;
// 			vector<double> r_v_IO_TEMP = v_IO_TEMP;
// 		}
			// map<int, c_UCN_PATH> m_vi_c_UCN_PATH;
			
			// for(int i = 0; i<vci_numThreads; i++)
			// {
				// c_UCN_PATH c_UCN_PATH_TEMP;
				// for(int j = 0; j<vci_numRecordsPerThread; j++)
				// {
					// double vd_IO_TEMP[e_d_IO_LAST];
					// for(int k = 0; k<e_d_IO_LAST; k++)
					// {
						// vd_IO_TEMP[k] = fxn_vd_IO(i,j,k);
					// }
					// c_UCN_INSTANT c_UCN_INSTANT_TEMP = c_UCN_INSTANT(vd_IO_TEMP);
					// c_UCN_PATH_TEMP.s_c_UCN_INSTANT.insert(c_UCN_INSTANT_TEMP);
				// }
				// m_vi_c_UCN_PATH.insert(c_UCN_PATH_TEMP);
				
			// }
			// fxn_FORMATTED_WRITE("UCN", true);
			// fxn_FORMATTED_WRITE_FROM_INT_DOUBLE_VECTORS("UCN_REVERSE",true, r_v_IO_INT_TEMP, r_v_IO_TEMP);

		// fxn_FORMATTED_WRITE_MINIMUM("UCN", true);
		
		// fxn_FORMATTED_WRITE_ARRAY(vd_IO, vi_IO, "tantrum_a1", false);
		
	// else if(e_v_DATA_OPTION==e_DATA_PREVIOUS) {
		// ifstream ifp_INPUT;
		// char *cstring_INPUT_FILENAME = "UCN_OUTPUT_v_1_0_1_GMT_6_25_2014_2_29_43";
		// ifp_INPUT.open(cstring_INPUT_FILENAME, ofstream::in | ofstream::binary);
		// int *p_vi_vc_PH;
		// ifp_INPUT.read((char*) &p_vi_vc_PH,sizeof(int));
		// ifp_INPUT.read((char*) &p_vi_vc_PH,sizeof(int));
		// ifp_INPUT.read((char*) &p_vi_vc_PH,sizeof(int));
		
		// int vd_CONST_streamsize = sizeof(double)*e_d_CONST_LAST;
		// char h_CONST_vc_PH[vd_CONST_streamsize];
		// ifp_INPUT.read(h_CONST_vc_PH,vd_CONST_streamsize);
		// for(int vi_INDEX = 0; (vi_INDEX*sizeof(double))<vd_CONST_streamsize; vi_INDEX++){
			// double *p_vd_TEMP;
			// p_vd_TEMP = reinterpret_cast<double*>(&h_CONST_vc_PH[vi_INDEX*sizeof(double)]);
			// m_vi_CONST[vi_INDEX] = *p_vd_TEMP;
		// }
		// int vi_CONST_streamsize = sizeof(int)*e_d_CONST_INT_LAST;
		// char h_CONST_INT_vc_PH[vi_CONST_streamsize];
		// ifp_INPUT.read(h_CONST_INT_vc_PH,vi_CONST_streamsize);
		// for(int vi_INDEX = 0; (vi_INDEX*sizeof(int))<vi_CONST_streamsize; vi_INDEX++){
			// int *p_vi_TEMP;
			// p_vi_TEMP = reinterpret_cast<int*>(&h_CONST_INT_vc_PH[vi_INDEX*sizeof(int)]);
			// m_vi_CONST[vi_INDEX] = *p_vi_TEMP;
		// }
		// int vd_IO_streamsize = sizeof(double)*m_vi_CONST_INT[e_d_CONST_INT_numThreads]*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_LAST;
		// char h_IO_vc_PH[vd_IO_streamsize];
		// ifp_INPUT.read(h_IO_vc_PH,vd_IO_streamsize);
		// for(int vi_INDEX = 0; (vi_INDEX*sizeof(double))<vd_IO_streamsize; vi_INDEX++){
			// double *p_vd_TEMP;
			// p_vd_TEMP = reinterpret_cast<double*>(&h_IO_vc_PH[vi_INDEX*sizeof(double)]);
			// vd_IO[vi_INDEX] = *p_vd_TEMP;
		// }
		// int vi_IO_streamsize = sizeof(int)*m_vi_CONST_INT[e_d_CONST_INT_numThreads]*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_INT_LAST;
		// char h_IO_INT_vc_PH[vi_IO_streamsize];
		// ifp_INPUT.read(h_IO_INT_vc_PH,vi_IO_streamsize);
		// for(int vi_INDEX = 0; (vi_INDEX*sizeof(int))<vi_IO_streamsize; vi_INDEX++){
			// int *p_vi_TEMP;
			// p_vi_TEMP = reinterpret_cast<int*>(&h_IO_INT_vc_PH[vi_INDEX*sizeof(int)]);
			// vi_IO[vi_INDEX] = *p_vi_TEMP;
		// }
		// ifp_INPUT.close();
		
		// ifp_INPUT.open(cstring_INPUT_FILENAME, ifstream::in | ifstream::binary);
		
		// int vd_streamsize = sizeof(double)*m_vi_CONST_INT[e_d_CONST_INT_numThreads]*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_LAST;
		// char vd_IO_vc_PH[vd_streamsize];h_IO
		// ifp_INPUT.read(vd_IO_vc_PH,vd_streamsize);
		// for(int vi_INDEX = 0; (vi_INDEX*sizeof(double))<vd_streamsize; vi_INDEX++){
			// double *p_vd_TEMP;
			// p_vd_TEMP = reinterpret_cast<double*>(&vd_IO_vc_PH[vi_INDEX*sizeof(double)]);
			// vd_IO[vi_INDEX] = *p_vd_TEMP;
		// }
		// ifp_INPUT.close();
	// }
	// char cstring_DOUBLE_INPUT_FILENAME[64];
	// sprintf (cstring_DOUBLE_INPUT_FILENAME,"INPUT_DOUBLE_v_1_0_0_GMT_%d_%d_%d_%d_%d_%d.bin",s_tm_timeinfo_FINISH->tm_mon+1,(s_tm_timeinfo_FINISH->tm_mday),(s_tm_timeinfo_FINISH->tm_year+1900),s_tm_timeinfo_FINISH->tm_hour,s_tm_timeinfo_FINISH->tm_min,s_tm_timeinfo_FINISH->tm_sec);
	// ofstream ofp_OUTPUT;
	// ofp_OUTPUT.open(cstring_DOUBLE_INPUT_FILENAME, ofstream::trunc | ofstream::out | ofstream::binary);
	// int vd_streamsize = sizeof(double)*m_vi_CONST_INT[e_d_CONST_INT_numThreads]*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_LAST;
  // ofp_OUTPUT.write(reinterpret_cast<char*>(&vd_IO),vd_streamsize);
	// ofp_OUTPUT.close();
	// char cstring_INT_OUTPUT_FILENAME[64];
	// sprintf (cstring_INT_OUTPUT_FILENAME,"OUTPUT_INT_v_1_0_0_GMT_%d_%d_%d_%d_%d_%d.bin",s_tm_timeinfo_FINISH->tm_mon+1,(s_tm_timeinfo_FINISH->tm_mday),(s_tm_timeinfo_FINISH->tm_year+1900),s_tm_timeinfo_FINISH->tm_hour,s_tm_timeinfo_FINISH->tm_min,s_tm_timeinfo_FINISH->tm_sec);
	// ofp_OUTPUT.open(cstring_INT_OUTPUT_FILENAME, ofstream::trunc | ofstream::out | ofstream::binary);
	// int vi_streamsize = sizeof(int)*m_vi_CONST_INT[e_d_CONST_INT_numThreads]*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_INT_LAST;
	// ofp_OUTPUT.write(reinterpret_cast<char*>(&vi_IO),vi_streamsize);
	// ofp_OUTPUT.close();

int c_UCN_RUN_DATA::fxn_V3_OUTPUT_CSV()
{
	// map<int, string>*> m_vi_cstr_IO = r_m_vi_cstr_IO;
	// map<int, string>*> m_vi_cstr_IO_INT = r_m_vi_cstr_IO_INT;
	// map<int, string>*> m_vi_cstr_CONST = r_m_vi_cstr_CONST;
	// map<int, string>*> m_vi_cstr_CONST_INT = r_m_vi_cstr_CONST_INT;
	// map<int, double> m_vi_CONST = r_m_vi_CONST;
	// map<int, int> m_vi_CONST_INT = r_m_vi_CONST_INT;
	static int param_PLACEHOLDER = 0;
	struct tm * s_tm_timeinfo_TEMP;
	int i, j, k;
	time_t rawtime;
	time(&rawtime);
	s_tm_timeinfo_TEMP = gmtime ( &rawtime );
	char cstring_DOUBLE_OUTPUT_FILENAME[64]; // = "tempo_tantrum.txt";
	sprintf (cstring_DOUBLE_OUTPUT_FILENAME,
		"UCN_OUTPUT_v_1_1_0_GMT_%d_%d_%d_%d_%d_%d_%d.csv",
		s_tm_timeinfo_TEMP->tm_mon+1,
		(s_tm_timeinfo_TEMP->tm_mday),
		(s_tm_timeinfo_TEMP->tm_year+1900),
		s_tm_timeinfo_TEMP->tm_hour,
		s_tm_timeinfo_TEMP->tm_min,
		s_tm_timeinfo_TEMP->tm_sec,
		param_PLACEHOLDER);
	cout << "\nATTENTION THIS IS TESTING OF VECTOR SIZE " << v_IO.size() << " AND " << v_IO_INT.size();
	cout << "\nATTENTION THIS IS i<" << m_vi_CONST_INT[e_d_CONST_INT_numThreads] << ", j<" << m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread];
	cout << "\nATTENTION THIS IS CONST (" << m_vi_cstr_CONST.size() << ")/(" << e_d_CONST_LAST << ")";
	cout << "\nATTENTION THIS IS CONST (" << m_vi_cstr_CONST_INT.size() << ")/(" << e_d_CONST_INT_LAST << ")";
	cout << "\nATTENTION THIS IS CONST (" << m_vi_cstr_IO_INT.size() << ")/(" << e_d_IO_INT_LAST << ")";
	cout << "\nATTENTION THIS IS CONST (" << m_vi_cstr_IO.size() << ")/(" << e_d_IO_LAST << ")";
	cout << "\nATTENTION THIS IS CONST k<" << e_d_CONST_LAST << "/k<" << e_d_CONST_INT_LAST << " AND IO k<" << e_d_IO_LAST << "/k<" << e_d_IO_INT_LAST;
	// sprintf (cstring_DOUBLE_OUTPUT_FILENAME,
	// "OUT_%d_%d_%d_%d_%d_%d_%d.csv",
	// (s_tm_timeinfo_FINISH->tm_mon+1),
	// (s_tm_timeinfo_FINISH->tm_mday),
	// (s_tm_timeinfo_FINISH->tm_year+1900),
	// s_tm_timeinfo_FINISH->tm_hour,
	// s_tm_timeinfo_FINISH->tm_min, 
	// s_tm_timeinfo_FINISH->tm_sec,
	// param_PLACEHOLDER);
	// sprintf (cstring_DOUBLE_OUTPUT_FILENAME,
	// "OUT_v_1_0_0_%d.csv",
	// param_PLACEHOLDER);
	ofstream ofp_OUTPUT;
	ofp_OUTPUT.open(cstring_DOUBLE_OUTPUT_FILENAME, ofstream::trunc | ofstream::out);
	bool vb_START_FLAG = true;
	// for(k = 0; k<e_d_CONST_LAST; k++)
	// {
	 // cout << "\n" << m_vi_cstr_CONST[k] << ",";
	// }
	// cout << "WHAT THE FUCK IS GOING ON?????";
	for(i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
	{
		
		for(j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
		{
			ofp_OUTPUT << "*";
			if(vb_START_FLAG)
			{
				for(k = 0; k<e_d_CONST_INT_LAST; k++)
				{
				 ofp_OUTPUT << m_vi_cstr_CONST_INT[k] << ",";
				}
				for(k = 0; k<e_d_CONST_LAST; k++)
				{
				 ofp_OUTPUT << m_vi_cstr_CONST[k] << ",";
				}
				ofp_OUTPUT << "\n";
				for(int k = 0; k<e_d_CONST_INT_LAST; k++)
				{
				 ofp_OUTPUT << m_vi_CONST_INT[k] << ",";
				}
				for(k = 0; k<e_d_CONST_LAST; k++)
				{
				 ofp_OUTPUT << m_vi_CONST[k] << ",";
				}
				ofp_OUTPUT << "\n";
				for(k = 0; k<e_d_IO_INT_LAST; k++)
				{
				 ofp_OUTPUT << m_vi_cstr_IO_INT[k] << ",";
				}
				for(k = 0; k<e_d_IO_LAST; k++)
				{
				 ofp_OUTPUT << m_vi_cstr_IO[k] << ",";
				}
				ofp_OUTPUT << "\n";
				vb_START_FLAG = false;
			}
			for(k = 0; k<e_d_IO_INT_LAST; k++) 
			{
				// ofp_OUTPUT << "h";
				ofp_OUTPUT << v_IO_INT[i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_INT_LAST+j*e_d_IO_INT_LAST+k] << ",";
			}
			for(k = 0; k<e_d_IO_LAST; k++)
			{
				// ofp_OUTPUT << "H";
				ofp_OUTPUT << v_IO[i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_LAST+j*e_d_IO_LAST+k] << ",";
			}
			ofp_OUTPUT << "\n";
		}
	}
	ofp_OUTPUT.close();
	param_PLACEHOLDER++;
	return 0;
}
double c_UCN_RUN_DATA::fxn_vd_IO(int param_THREAD, int param_RECORD, int param_INDEX)
{
	int vi_THREAD_OFFSET = param_THREAD*fvci_h_CONST(e_d_CONST_INT_numRecordsPerThread)*e_d_IO_LAST;
	int vi_RECORD_OFFSET = param_RECORD*e_d_IO_LAST;
	int vi_TOTAL_OFFSET = vi_THREAD_OFFSET + vi_RECORD_OFFSET + param_INDEX;
	return v_IO[vi_TOTAL_OFFSET];
}
int c_UCN_RUN_DATA::fxn_vi_IO(int param_THREAD, int param_RECORD, int param_INDEX)
{
	int vi_THREAD_OFFSET = param_THREAD*m_vi_CONST[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_INT_LAST;
	int vi_RECORD_OFFSET = param_RECORD*e_d_IO_INT_LAST;
	int vi_TOTAL_OFFSET = vi_THREAD_OFFSET + vi_RECORD_OFFSET + param_INDEX;
	return v_IO_INT[vi_TOTAL_OFFSET];
}
const int c_UCN_RUN_DATA::fvci_h_CONST(int vi_INDEX)
{
	return m_vi_CONST_INT[vi_INDEX];
}
const double c_UCN_RUN_DATA::fvcd_h_CONST(int vi_INDEX) 
{
	return m_vi_CONST[vi_INDEX];
}
int c_UCN_RUN_DATA::fxn_vi_IO_DELTA(int param_THREAD, int param_RECORD, int param_INDEX)
{
	if(param_RECORD==0) return fxn_vi_IO(param_THREAD, 0, param_INDEX);
	else return (fxn_vi_IO(param_THREAD,(param_RECORD-1),param_INDEX)/fxn_vi_IO(param_THREAD,param_RECORD,param_INDEX));
}
double c_UCN_RUN_DATA::fxn_vd_IO_DELTA(int param_THREAD, int param_RECORD, int param_INDEX)
{
	if(param_RECORD==0) return fxn_vd_IO(param_THREAD, 0, param_INDEX);
	else return (fxn_vd_IO(param_THREAD,(param_RECORD-1),param_INDEX)/fxn_vd_IO(param_THREAD,param_RECORD,param_INDEX));
}
int c_UCN_RUN_DATA::fxn_vi_IO_SUM(int param_THREAD, int param_INDEX)	
{
	int vi_RESULT = 0;
	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; i++)
		vi_RESULT += fxn_vd_IO(param_THREAD, i, param_INDEX);
	return vi_RESULT;
}
double c_UCN_RUN_DATA::fxn_vd_IO_SUM(int param_THREAD, int param_INDEX)	
{
	double vd_RESULT = 0;
	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; i++)
		vd_RESULT += fxn_vd_IO(param_THREAD, i, param_INDEX);
	return vd_RESULT;
}
double c_UCN_RUN_DATA::fxn_vd_vi_IO_AVERAGE(int param_THREAD, int param_INDEX)
{
	double vd_SUM = static_cast<double>(fxn_vi_IO_SUM(param_THREAD, param_INDEX));
	double vd_DIVISOR = static_cast<double>(m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]);
	return (vd_SUM/vd_DIVISOR);
}
double c_UCN_RUN_DATA::fxn_vd_IO_AVERAGE(int param_THREAD, int param_INDEX)
{
	return (fxn_vd_IO_SUM(param_THREAD, param_INDEX)/m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]);
}
// map<int, double> c_UCN_RUN_DATA::fxn_m_vi_vd_PARAM_AVERAGE(int param_INDEX);
// {
// 	map<int, double> m_vi_vd_PARAM_AVERAGE;
// 	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
// 	{
// 		double vd_AVERAGE = 0;
// 		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
// 		{
// 			vd_AVERAGE += fxn_vd_IO(i, j, param_INDEX);
// 		}
// 		vd_AVERAGE /= m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread];
// 		m_vi_vd_PARAM_AVERAGE.insert(std::pair<int,double>(param_INDEX,vd_AVERAGE));
// 	}
// 	return m_vi_vd_PARAM_AVERAGE;
// }
// map<int, double> c_UCN_RUN_DATA::fxn_m_vi_vd_PARAM_AVERAGE_INT(int param_INDEX);
// {
// 	map<int, double> m_vi_vd_PARAM_AVERAGE;
// 	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
// 	{
// 		double vd_AVERAGE = 0;
// 		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
// 		{
// 			vd_AVERAGE += static_cast<double>(fxn_vi_IO(i, j, param_INDEX));
// 		}
// 		vd_AVERAGE /= static_cast<double>(m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]);
// 		m_vi_vd_PARAM_AVERAGE.insert(std::pair<int,double>(param_INDEX,vd_AVERAGE));
// 	}
// 	return m_vi_vd_PARAM_AVERAGE;
// }
// map< std::pair<int,int>, double> c_UCN_RUN_DATA::fxn_m_vi_vd_PARAM_DELTA(int param_INDEX);
// {
// 	map< std::pair<int,int>, double> m_pair_vi_vi_vd_PARAM_DELTA;
// 	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
// 	{
// 		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
// 		{
// 			if(j==0) 
// 			{
// 				m_pair_vi_vi_vd_PARAM_DELTA.insert(
// 					std::pair< std::pair<int,int>(i,j), 
// 					fxn_vd_IO(i, j, param_INDEX));
// 			}
// 			else
// 			{
// 				m_pair_vi_vi_vd_PARAM_DELTA.insert(
// 					std::pair< std::pair<int,int>(i,j), 
// 					(fxn_vd_IO(i, j, param_INDEX) - fxn_vd_IO(i, (j - 1), param_INDEX)));
// 			}
// 		}
// 	}
// 	return m_pair_vi_vi_vd_PARAM_DELTA;
// }
// map< std::pair<int,int>, int> c_UCN_RUN_DATA::fxn_m_vi_vi_PARAM_INT_DELTA(int param_INDEX);
// {
// 	map< std::pair<int,int>, int> m_pair_vi_vi_vi_PARAM_DELTA;
// 	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
// 	{
// 		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
// 		{
// 			if(j==0) 
// 			{
// 				m_pair_vi_vi_vi_PARAM_DELTA.insert(
// 					std::pair< std::pair<int,int>(i,j), 
// 					fxn_vd_IO(i, j, param_INDEX));
// 			}
// 			else
// 			{
// 				m_pair_vi_vi_vi_PARAM_DELTA.insert(
// 					std::pair< std::pair<int,int>(i,j), 
// 					(fxn_vd_IO(i, j, param_INDEX) - fxn_vd_IO(i, (j - 1), param_INDEX)));
// 			}
// 			vd_DELTA += static_cast<double>(fxn_vi_IO(i, j, param_INDEX));
// 		}
// 		vd_DELTA /= static_cast<double>(m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]);
// 		m_vi_vd_PARAM_DELTA.insert(std::pair<int,double>(param_INDEX,vd_DELTA));
// 	}
// 	return m_pair_vi_vi_vi_PARAM_DELTA;
// }

int c_UCN_RUN_DATA::fxn_FORMATTED_WRITE(const char *vc_a1_FILENAME, bool vb_TIMESTAMP_FLAG)
{
	vector<int> & r_v_IO_INT_TEMP = v_IO_INT;
	vector<double> & r_v_IO_DOUBLE_TEMP = v_IO;
	fxn_FORMATTED_WRITE_FROM_INT_DOUBLE_VECTORS(vc_a1_FILENAME, vb_TIMESTAMP_FLAG, r_v_IO_INT_TEMP, r_v_IO_DOUBLE_TEMP);
	return 0;
}
int c_UCN_RUN_DATA::fxn_FORMATTED_WRITE_FROM_INT_DOUBLE_VECTORS(
	const char *vc_a1_FILENAME, 
	bool vb_TIMESTAMP_FLAG, 
	vector<int> & r_v_IO_INT_PARAM, 
	vector<double> & r_v_IO_DOUBLE_PARAM)
{
	static int vsi_PLACEHOLDER = 0;
	char cstring_OUTPUT_FILENAME[64]; // = "tempo_tantrum.txt";
	if(vb_TIMESTAMP_FLAG)
	{
		time_t l_rawtime;
		time(&l_rawtime);
		struct tm * s_tm_timeinfo_TEMP = gmtime(&l_rawtime);
		sprintf (cstring_OUTPUT_FILENAME,
		"%s_%d_%d_%d_%d_%d_%d_%d.csv",
		vc_a1_FILENAME,
		s_tm_timeinfo_TEMP->tm_mon+1,
		(s_tm_timeinfo_TEMP->tm_mday),
		(s_tm_timeinfo_TEMP->tm_year+1900),
		s_tm_timeinfo_TEMP->tm_hour,
		s_tm_timeinfo_TEMP->tm_min,
		s_tm_timeinfo_TEMP->tm_sec,
		vsi_PLACEHOLDER);
		vsi_PLACEHOLDER++;
	}
	else
	{
		sprintf (cstring_OUTPUT_FILENAME,
			"%s.csv",
			vc_a1_FILENAME);
	}
	
	ofstream ofp_OUTPUT;
	ofp_OUTPUT.open(cstring_OUTPUT_FILENAME, ofstream::trunc | ofstream::out);
	ofp_OUTPUT << std::fixed;
	ofp_OUTPUT.precision(20);
	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
	{ 
		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
		{ 
			if(i==0 && j==0)
			{
				for(int k = 0; k<e_d_CONST_INT_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_CONST_INT[k] << ",";
				}
				for(int k = 0; k<e_d_CONST_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_CONST[k] << ",";
				}
				ofp_OUTPUT << "\n";
				for(int k = 0; k<e_d_CONST_INT_LAST; k++)
				{
					ofp_OUTPUT << m_vi_CONST_INT[k] << ",";
				}
				for(int k = 0; k<e_d_CONST_LAST; k++)
				{
					ofp_OUTPUT << m_vi_CONST[k] << ",";
				}
				ofp_OUTPUT << "\n";
				for(int k = 0; k<e_d_IO_INT_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_IO_INT[k] << ",";
				}
				for(int k = 0; k<e_d_IO_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_IO[k] << ",";
				}
				ofp_OUTPUT << "\n";
			}
			for(int k = 0; k<e_d_IO_INT_LAST; k++)
			{
				int vi_INDEX_TEMP = (i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]+j)*e_d_IO_INT_LAST+k;
				ofp_OUTPUT << r_v_IO_INT_PARAM[vi_INDEX_TEMP] << ",";
			}
			for(int k = 0; k<e_d_IO_LAST; k++)
			{
				int vi_INDEX_TEMP = (i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]+j)*e_d_IO_LAST+k;
				ofp_OUTPUT << r_v_IO_DOUBLE_PARAM[vi_INDEX_TEMP] << ",";
			}
			ofp_OUTPUT << "\n";
		}
	}
	ofp_OUTPUT.close();
	return 0;
}

int c_UCN_RUN_DATA::fxn_FORMATTED_WRITE_ARRAY(
	double *vd_IO, 
	int *vi_IO, 
	const char *vc_a1_FILENAME, 
	bool vb_TIMESTAMP_FLAG)
{
	static int vsi_PLACEHOLDER = 0;
	char cstring_OUTPUT_FILENAME[64]; // = "tempo_tantrum.txt";
	if(vb_TIMESTAMP_FLAG)
	{
		time_t l_rawtime;
		time(&l_rawtime);
		struct tm * s_tm_timeinfo_TEMP = gmtime(&l_rawtime);
		sprintf (cstring_OUTPUT_FILENAME,
		"UCN_v_1_2_0_GMT_%s_%d_%d_%d_%d_%d_%d_%d.csv",
		vc_a1_FILENAME,
		s_tm_timeinfo_TEMP->tm_mon+1,
		(s_tm_timeinfo_TEMP->tm_mday),
		(s_tm_timeinfo_TEMP->tm_year+1900),
		s_tm_timeinfo_TEMP->tm_hour,
		s_tm_timeinfo_TEMP->tm_min,
		s_tm_timeinfo_TEMP->tm_sec,
		vsi_PLACEHOLDER);
		vsi_PLACEHOLDER++;
	}
	else
	{
		sprintf (cstring_OUTPUT_FILENAME,
			"%s.csv",
			vc_a1_FILENAME);
	}
	ofstream ofp_OUTPUT;
	ofp_OUTPUT.open(cstring_OUTPUT_FILENAME, ofstream::trunc | ofstream::out);
	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
	{ 
		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
		{ 
			if(i==0 && j==0)
			{
				for(int k = 0; k<e_d_CONST_INT_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_CONST_INT[k] << ",";
				}
				for(int k = 0; k<e_d_CONST_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_CONST[k] << ",";
				}
				ofp_OUTPUT << "\n";
				for(int k = 0; k<e_d_CONST_INT_LAST; k++)
				{
					ofp_OUTPUT << m_vi_CONST_INT[k] << ",";
				}
				for(int k = 0; k<e_d_CONST_LAST; k++)
				{
					ofp_OUTPUT << m_vi_CONST[k] << ",";
				}
				ofp_OUTPUT << "\n";
				for(int k = 0; k<e_d_IO_INT_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_IO_INT[k] << ",";
				}
				for(int k = 0; k<e_d_IO_LAST; k++)
				{
					ofp_OUTPUT << m_vi_cstr_IO[k] << ",";
				}
				ofp_OUTPUT << "\n";
			}
			for(int k = 0; k<e_d_IO_INT_LAST; k++)
			{
				int vi_INDEX_TEMP = (i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]+j)*e_d_IO_INT_LAST+k;
				ofp_OUTPUT << vi_IO[vi_INDEX_TEMP] << ",";
			}
			for(int k = 0; k<e_d_IO_LAST; k++)
			{
				int vi_INDEX_TEMP = (i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]+j)*e_d_IO_LAST+k;
				ofp_OUTPUT << vd_IO[vi_INDEX_TEMP] << ",";
			}
			ofp_OUTPUT << "\n";
		}
	}
	ofp_OUTPUT.close();
	return 0;
}

int c_UCN_RUN_DATA::fxn_FORMATTED_WRITE_MINIMUM(const char *vc_a1_FILENAME, bool vb_TIMESTAMP_FLAG)
{
	static int vsi_PLACEHOLDER = 0;
	char cstring_OUTPUT_FILENAME[64]; // = "tempo_tantrum.txt";
	if(vb_TIMESTAMP_FLAG)
	{
		time_t l_rawtime;
		time(&l_rawtime);
		struct tm * s_tm_timeinfo_TEMP = gmtime(&l_rawtime);
		sprintf (cstring_OUTPUT_FILENAME,
		"%s_%d_%d_%d_%d_%d_%d_%d.csv",
		vc_a1_FILENAME,
		s_tm_timeinfo_TEMP->tm_mon+1,
		(s_tm_timeinfo_TEMP->tm_mday),
		(s_tm_timeinfo_TEMP->tm_year+1900),
		s_tm_timeinfo_TEMP->tm_hour,
		s_tm_timeinfo_TEMP->tm_min,
		s_tm_timeinfo_TEMP->tm_sec,
		vsi_PLACEHOLDER);
		vsi_PLACEHOLDER++;
	}
	else
	{
		sprintf (cstring_OUTPUT_FILENAME,
			"%s.csv",
			vc_a1_FILENAME);
	}
	double vd_CURRENT_TIME = 0, vd_PREVIOUS_TIME = 0, vd_DELTA_TIME = 0;
	ofstream ofp_OUTPUT;
	ofp_OUTPUT.open(cstring_OUTPUT_FILENAME, ofstream::trunc | ofstream::out);
	ofp_OUTPUT << std::fixed;
	ofp_OUTPUT.precision(20);
	for(int i = 0; i<m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
	{ 
		for(int j = 0; j<m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]; j++)
		{ 
			if(i==0 && j==0)
			{
				ofp_OUTPUT << m_vi_cstr_IO_INT[e_d_IO_INT_THREAD] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO_INT[e_d_IO_INT_RECORD] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_T] << ","; 
				ofp_OUTPUT << "D" << m_vi_cstr_IO[e_d_IO_T] << ",";
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_X] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_Y] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_Z] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_VX] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_VY] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_VZ] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_SPINNOR_1] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_SPINNOR_2] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_SPINNOR_3] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_BX] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_BY] << ","; 
				ofp_OUTPUT << m_vi_cstr_IO[e_d_IO_BZ] << ","; 
			}
			int vi_INDEX_TEMP = (i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]+j)*e_d_IO_INT_LAST+ e_d_IO_INT_THREAD;
			ofp_OUTPUT << fxn_vi_IO(i,j,e_d_IO_INT_THREAD);
			ofp_OUTPUT << fxn_vi_IO(i,j,e_d_IO_INT_RECORD);
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_T);
			ofp_OUTPUT << fxn_vd_IO_DELTA(i,j,e_d_IO_T);
			
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_X); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_Y); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_Z); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_VX); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_VY); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_VZ); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_SPINNOR_1); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_SPINNOR_2); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_SPINNOR_3); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_BX); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_BY); 
			ofp_OUTPUT << fxn_vd_IO(i,j,e_d_IO_BZ); 
			ofp_OUTPUT << "\n";
		}
	}
	ofp_OUTPUT.close();
	return 0;
}


int fxn_STANDARD_INPUT_DATA(
	map<int, string> & r_m_vi_cstr_IO_INPUT, 
	map<int, string> & r_m_vi_cstr_IO_INT_INPUT, 
	map<int, string> & r_m_vi_cstr_CONST_INPUT, 
	map<int, string> & r_m_vi_cstr_CONST_INT_INPUT, 
	map<int, string> & r_m_vi_cstr_RKQS_ERROR, 
	map<int, int> & r_m_vi_CONST_INT, 
	map<int, double> & r_m_vi_CONST, 
	const int param_numThreads, 
	int *param_a1_INPUT_INT, //[param_numThreads*e_d_INPUT_INT_LAST], 
	double *param_a1_INPUT) //[param_numThreads*e_d_INPUT_LAST])
{
	srand (time(NULL));
	double vd_zoutafp =  1.7;
	double vd_zstart  = -.06;
	// unsigned vi_seed1 = std::chrono::system_clock::now().time_since_epoch().count();
	// std::mt19937 mt19937_LOCAL (vi_seed1);
	// std::uniform_real_distribution<double> distribution_vd_0_1(0.0,1.0);
	for(int i = 0; i<r_m_vi_CONST_INT[e_d_CONST_INT_numThreads]; i++)
	{
		double vd_RANDOM_0 = ( (rand() % 32767) / 32767.0);
		double vd_RANDOM_1 = ( (rand() % 32767) / 32767.0);
		double vd_RANDOM_2 = ( (rand() % 32767) / 32767.0);
		double vd_RANDOM_3 = ( (rand() % 32767) / 32767.0);
		double vd_R_TEMP = r_m_vi_CONST[e_d_CONST_guide_1_radius] * vd_RANDOM_0;
		double vd_PHI_TEMP = 2.0 * r_m_vi_CONST[e_d_CONST_def_PI] * vd_RANDOM_1;
		double vd_THETA_TEMP = 2.0 * r_m_vi_CONST[e_d_CONST_def_PI] * vd_RANDOM_2;
		double vd_SX_TEMP = cos(vd_THETA_TEMP);
		double vd_SY_TEMP = sin(vd_THETA_TEMP);
		double vd_xin = vd_R_TEMP * cos(vd_PHI_TEMP);
		double vd_yin = vd_R_TEMP * sin(vd_PHI_TEMP);
		double vd_xout = 0;
		double vd_yout = 0;
		double vd_range = sqrt( (vd_xout-vd_xin)*(vd_xout-vd_xin)
			+(vd_yout-vd_yin)*(vd_yout-vd_yin)
			+(vd_zoutafp-vd_zstart)*(vd_zoutafp-vd_zstart));
		double vd_V_TEMP = 7.0 * pow( vd_RANDOM_3, (1.0/3.0) ); 
		double vd_VX_TEMP = vd_V_TEMP * (vd_xout-vd_xin)/vd_range;
		double vd_VY_TEMP = vd_V_TEMP * (vd_yout-vd_yin)/vd_range;
		double vd_VZ_TEMP = vd_V_TEMP * (vd_zoutafp-vd_zstart)/vd_range;
		
		// cout << "\n";
		// cout << 0.0;
		// cout << vd_xin; 
		// cout << vd_yin; 
		// cout << vd_zstart; 
		// cout << vd_VX_TEMP; 
		// cout << vd_VY_TEMP; 
		// cout << vd_VZ_TEMP; 
		// cout << 0.0; 
		// cout << 0.0; 
		// cout << 1.0; 
		int vi_THREAD_INT_OFFSET = i*e_d_IO_INT_LAST;
		int vi_THREAD_DOUBLE_OFFSET = i*e_d_IO_LAST;
		
		param_a1_INPUT_INT[vi_THREAD_INT_OFFSET + e_d_INPUT_INT_THREAD] = i;
		param_a1_INPUT_INT[vi_THREAD_INT_OFFSET + e_d_INPUT_INT_RECORD] = 0;
		
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_T] = 0.0;
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_X] = vd_xin; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_Y] = vd_yin; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_Z] = vd_zstart; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_VX] = vd_VX_TEMP; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_VY] = vd_VY_TEMP; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_VZ] = vd_VZ_TEMP; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_0] = 1.0; 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_1] = (1.0/sqrt(2.0)); 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_2] = (1.0/sqrt(2.0)); 
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_3] =  0.0;
		param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_HNEXT] = fmin(r_m_vi_CONST[e_d_CONST_h1], r_m_vi_CONST[e_d_CONST_h1_SPIN]);
		
		printf("\nID:%d|RECORD:%d|TIME:%f|XYZ=(%f,%f,%f)|VEL=(%f,%f,%f)|SPIN:(%f,%f,%f,%f)|HNEXT:%f",
			param_a1_INPUT_INT[vi_THREAD_INT_OFFSET + e_d_INPUT_INT_THREAD], 
			param_a1_INPUT_INT[vi_THREAD_INT_OFFSET + e_d_INPUT_INT_RECORD], 
			param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_T], 
			param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_X], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_Y], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_Z], 
			param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_VX], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_VY], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_VZ], 
			param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_0], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_1], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_2], param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_SPINNOR_3], 
			param_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_INPUT_HNEXT]);
	}
	return 0;
}
c_UCN_RUN_DATA fxn_PARAMETERIZED_CONSTRUCTOR_c_UCN_RUN_DATA(
	const int param_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX, 
	const int param_e_d_CONST_INT_numRecordsPerThread_EXP, 
	const int param_e_d_CONST_INT_numThreads_EXP, 
	const int param_e_d_CONST_INT_numRecordsPerUpdate, 
	const int param_e_d_CONST_INT_numCyclesPerRecord,
	map<int, int> param_m_vi_CONST_INT, 
	map<int, double> param_m_vi_CONST)
{ 
	const int vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX = 
		( param_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX>=0 ? param_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX : 0 );
	const int vi_INPUT_e_d_CONST_INT_numRecordsPerThread_EXP = 
		( param_e_d_CONST_INT_numRecordsPerThread_EXP>=0 ? param_e_d_CONST_INT_numRecordsPerThread_EXP : 0 );
	const int vi_INPUT_e_d_CONST_INT_numThreads_EXP = 
		( param_e_d_CONST_INT_numThreads_EXP>=0 ? param_e_d_CONST_INT_numThreads_EXP : 0 );
	const int vi_INPUT_e_d_CONST_INT_numRecordsPerUpdate = 
		( param_e_d_CONST_INT_numRecordsPerUpdate>=1 ? param_e_d_CONST_INT_numRecordsPerUpdate : 1 );
	const int vi_INPUT_e_d_CONST_INT_numCyclesPerRecord = 
		( param_e_d_CONST_INT_numCyclesPerRecord>=1 ? param_e_d_CONST_INT_numCyclesPerRecord : 1 );
	
	cout << vi_INPUT_e_d_CONST_INT_numThreads_EXP << "THIS CORRECT????";
	map<int, string> m_vi_cstr_IO;
	map<int, string> m_vi_cstr_IO_INT;
	map<int, string> m_vi_cstr_CONST;
	map<int, string> m_vi_cstr_CONST_INT;
	map<int, string> m_vi_cstr_RKQS_ERROR;
	map<int, int> m_vi_CONST_INT;
	map<int, int> m_vi_CONST_INT_DEFAULT;
	map<int, double> m_vi_CONST;
	map<int, double> m_vi_CONST_DEFAULT;
	
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_NONE,"NONE"));
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_STEPSIZE_UNDERFLOW,"STEPSIZE_UNDERFLOW"));
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_XV_BOUNDS,"XV_BOUNDS"));
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_SPIN_BOUNDS,"SPIN_BOUNDS"));
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_COMBINED_BOUNDS,"COMBINED_BOUNDS"));
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_REVERSED_INTERVAL,"REVERSED_INTERVAL"));
	m_vi_cstr_RKQS_ERROR.insert(std::pair<int,string>(e_RKQS_ERROR_UNKNOWN,"UNKNOWN"));
	
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_T,"T"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_X,"X"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_Y,"Y"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_Z,"Z"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_VX,"VX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_VY,"VY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_VZ,"VZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SPINNOR_0,"SPINNOR_0"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SPINNOR_1,"SPINNOR_1"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SPINNOR_2,"SPINNOR_2"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SPINNOR_3,"SPINNOR_3"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_RED_VX,"RED_VX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_RED_VY,"RED_VY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_RED_VZ,"RED_VZ"));  
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_AX,"AX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_AY,"AY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_AZ,"AZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_DDT_SPINNOR_0,"DDT_SPINNOR_0")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_DDT_SPINNOR_1,"DDT_SPINNOR_1")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_DDT_SPINNOR_2,"DDT_SPINNOR_2")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_DDT_SPINNOR_3,"DDT_SPINNOR_3")); 
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_X,"SCAL_X"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_Y,"SCAL_Y"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_Z,"SCAL_Z"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_VX,"SCAL_VX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_VY,"SCAL_VY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_VZ,"SCAL_VZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_SPINNOR_0,"SCAL_SPINNOR_0")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_SPINNOR_1,"SCAL_SPINNOR_1")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_SPINNOR_2,"SCAL_SPINNOR_2")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SCAL_SPINNOR_3,"SCAL_SPINNOR_3"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_X,"ERR_X"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_Y,"ERR_Y"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_Z,"ERR_Z"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_VX,"ERR_VX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_VY,"ERR_VY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_VZ,"ERR_VZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_SPINNOR_0,"ERR_SPINNOR_0")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_SPINNOR_1,"ERR_SPINNOR_1")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_SPINNOR_2,"ERR_SPINNOR_2")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERR_SPINNOR_3,"ERR_SPINNOR_3")); 
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_X,"CORRECT_X"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_Y,"CORRECT_Y"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_Z,"CORRECT_Z"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_VX,"CORRECT_VX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_VY,"CORRECT_VY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_VZ,"CORRECT_VZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_SPINNOR_0,"CORRECT_SPINNOR_0")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_SPINNOR_1,"CORRECT_SPINNOR_1")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_SPINNOR_2,"CORRECT_SPINNOR_2")); 
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_CORRECT_SPINNOR_3,"CORRECT_SPINNOR_3")); 
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_BX,"BX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_BY,"BY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_BZ,"BZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_XDX,"dB_XDX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_XDY,"dB_XDY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_XDZ,"dB_XDZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_YDX,"dB_YDX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_YDY,"dB_YDY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_YDZ,"dB_YDZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_ZDX,"dB_ZDX"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_ZDY,"dB_ZDY"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_dB_ZDZ,"dB_ZDZ"));
	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_POLARIZATION,"POLARIZATION"));
  m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT,"HNEXT")); 
// 	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SX,"SX"));
// 	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SY,"SY"));
// 	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SZ,"SZ"));
// 	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SX_CORRECT,"SX_CORRECT"));
// 	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SY_CORRECT,"SY_CORRECT"));
// 	m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_SZ_CORRECT,"SZ_CORRECT"));
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_EPSILON_MAX_XV,"EPSILON_MAX_XV")); 
  // m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_EPSILON_MAX_S,"EPSILON_MAX_S")); 
  // m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERROR_XV,"ERROR_XV")); 
  // m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_ERROR_S,"ERROR_S")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_XV,"HNEXT_XV")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_S,"HNEXT_S")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_XV_PGROW_BOUNDED,"HNEXT_XV_PGROW_BOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_S_PGROW_BOUNDED,"HNEXT_S_PGROW_BOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_XV_PGROW_UNBOUNDED,"HNEXT_XV_PGROW_UNBOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_S_PGROW_UNBOUNDED,"HNEXT_S_PGROW_UNBOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_XV_PSHRNK_BOUNDED,"HNEXT_XV_PSHRNK_BOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_S_PSHRNK_BOUNDED,"HNEXT_S_PSHRNK_BOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_XV_PSHRNK_UNBOUNDED,"HNEXT_XV_PSHRNK_UNBOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HNEXT_S_PSHRNK_UNBOUNDED,"HNEXT_S_PSHRNK_UNBOUNDED")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_HCURRENT,"HCURRENT")); 
 	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_EXTRA_0,"EXTRA_0")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_EXTRA_1,"EXTRA_1")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_EXTRA_2,"EXTRA_2")); 
	// m_vi_cstr_IO.insert(std::pair<int,string>(e_d_IO_EXTRA_3,"EXTRA_3")); 
	
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_RETURN_VALUE_XV,"RETURN_VALUE_XV")); 
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_RETURN_VALUE_S,"RETURN_VALUE_S")); 
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_ERROR,"ERROR")); 
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_THREAD,"THREAD")); 
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_RECORD,"RECORD")); 
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_RKQS_STEPS,"RKQS_STEPS"));
	m_vi_cstr_IO_INT.insert(std::pair<int,string>(e_d_IO_INT_RKQS_ERROR,"RKQS_ERROR"));
	
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecordsPerUpdate,"numRecordsPerUpdate"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecordsPerUpdate, vi_INPUT_e_d_CONST_INT_numRecordsPerUpdate));//64[
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numCyclesPerRecord,"numCyclesPerRecord"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numCyclesPerRecord, vi_INPUT_e_d_CONST_INT_numCyclesPerRecord)); //8096[
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_CUDA_Mag,"def_CUDA_Mag"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numCyclesPerRecord,1)); //8096[
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_CUDA_dB,"def_CUDA_dB"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_CUDA_dB,5));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_GRAVITY,"FLAG_GRAVITY"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_GRAVITY,1));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_SPRING,"FLAG_SPRING"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_SPRING,1));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_MAGNETIC,"FLAG_MAGNETIC"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_MAGNETIC,2));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_RF,"e_d_CONST_INT_FLAG_RF"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_RF,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_CUDA_derivs_6,"def_CUDA_derivs_6"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_CUDA_derivs_6,3));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_PERFECT_POLARIZATION,"def_PERFECT_POLARIZATION"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_PERFECT_POLARIZATION,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_SPIN_INTEGRATOR_FLAG,"def_SPIN_INTEGRATOR_FLAG"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_SPIN_INTEGRATOR_FLAG,1));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_MAXSTP,"def_MAXSTP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_MAXSTP,1000000));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_MAXSTP1,"def_MAXSTP1"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_MAXSTP1,1000000));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_FLAG_TEST_NEUTRON,"def_FLAG_TEST_NEUTRON"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_FLAG_TEST_NEUTRON,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_CONST_ACCEL,"def_CONST_ACCEL"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_CONST_ACCEL,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_NMAX,"def_NMAX"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_NMAX,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_IA,"def_IA"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_IA,16807));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_IM,"def_IM"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_IM,2147483647));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_IQ,"def_IQ"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_IQ,127773));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_IR,"def_IR"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_IR,2836));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_def_NTAB,"def_NTAB"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_def_NTAB,32));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_0_EXP,"DIM_0_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_0_EXP,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_1_EXP,"DIM_1_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_1_EXP,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_2_EXP,"DIM_2_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_2_EXP,6));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_BFIELD_FLAG,"DIM_BFIELD_FLAG"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_BFIELD_FLAG,0));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_0,"DIM_0"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_0,ipow(2,m_vi_CONST_INT[e_d_CONST_INT_DIM_0_EXP])));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_1,"DIM_1"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_1,ipow(2,m_vi_CONST_INT[e_d_CONST_INT_DIM_1_EXP])));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_DIM_2,"DIM_2"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_DIM_2,ipow(2,m_vi_CONST_INT[e_d_CONST_INT_DIM_2_EXP])));
	int vi_numBlocks_EXP_TEMP, vi_numThreadsPerBlock_EXP_TEMP;
	
	cout << "Threads = " << vi_INPUT_e_d_CONST_INT_numThreads_EXP << "\n";
	cout << "minThreadsPerBlock_EXP = " << vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX << "\n";
	if(vi_INPUT_e_d_CONST_INT_numThreads_EXP<vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX)
	{
		// vi_numBlocks_EXP_TEMP = 0;
		// vi_numThreadsPerBlock_EXP_TEMP = vi_INPUT_e_d_CONST_INT_numThreads_EXP;
		vi_numThreadsPerBlock_EXP_TEMP = vi_INPUT_e_d_CONST_INT_numThreads_EXP;
		vi_numBlocks_EXP_TEMP = 0;
	}
	else
	{
		// vi_numBlocks_EXP_TEMP = vi_INPUT_e_d_CONST_INT_numThreads_EXP - vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX;
		// vi_numThreadsPerBlock_EXP_TEMP = vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX;
		vi_numThreadsPerBlock_EXP_TEMP = vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX;
		vi_numBlocks_EXP_TEMP = (vi_INPUT_e_d_CONST_INT_numThreads_EXP - vi_INPUT_e_d_CONST_INT_numThreadsPerBlock_EXP_MAX);
	}
	cout << "Blocks_EXP = " << vi_numBlocks_EXP_TEMP << "\n";
	cout << "ThreadsPerBlock_EXP = " << vi_numThreadsPerBlock_EXP_TEMP << "\n";
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numThreadsPerBlock_EXP,"numThreadsPerBlock_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numThreadsPerBlock_EXP, vi_numThreadsPerBlock_EXP_TEMP));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numBlocks_EXP,"numBlocks_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numBlocks_EXP,vi_numBlocks_EXP_TEMP));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecordsPerThread_EXP,"numRecordsPerThread_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecordsPerThread_EXP, vi_INPUT_e_d_CONST_INT_numRecordsPerThread_EXP));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecords_EXP,"numRecords_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecords_EXP, vi_INPUT_e_d_CONST_INT_numThreads_EXP + vi_INPUT_e_d_CONST_INT_numRecordsPerThread_EXP));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numThreads_EXP,"numThreads_EXP"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numThreads_EXP, vi_INPUT_e_d_CONST_INT_numThreads_EXP));
	
	cout << "\nATTTTTTTTEEENTION:\n\nthis value " << vi_INPUT_e_d_CONST_INT_numThreads_EXP << " should be the same as this value " <<  m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreads_EXP] << "\n\n";
	
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numThreadsPerBlock,"numThreadsPerBlock"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numThreadsPerBlock,ipow(2,m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreadsPerBlock_EXP])));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecordsPerThread,"numRecordsPerThread"));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numBlocks,"numBlocks"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecordsPerThread,ipow(2,m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numRecordsPerThread_EXP])));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numBlocks,ipow(2,m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numBlocks_EXP])));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecords,"numRecords"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecords,ipow(2,m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numRecords_EXP])));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numThreads,"numThreads"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numThreads,ipow(2,m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreads_EXP])));
	
	cout << "Threads: EXP=" << m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreads_EXP] << "\tACTUAL=" << m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreads] << "\n";	
	
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecordsPerReverse,"numRecordsPerReverse"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecordsPerReverse,1));
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_numRecordsPerReverse_SPIN,"numRecordsPerReverse_SPIN"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_numRecordsPerReverse_SPIN,0)); 
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_CLASSICAL_SPIN,"FLAG_CLASSICAL_SPIN"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_CLASSICAL_SPIN,1)); 
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_REVERSE_CHECK,"FLAG_REVERSE_CHECK"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_REVERSE_CHECK,0)); 
	m_vi_cstr_CONST_INT.insert(std::pair<int,string>(e_d_CONST_INT_FLAG_HOST_COMPILE,"FLAG_HOST_COMPILE"));
	m_vi_CONST_INT_DEFAULT.insert(std::pair<int,int>(e_d_CONST_INT_FLAG_HOST_COMPILE,0)); 
	
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_tframe,"tframe"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_tframe,1e-4));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_tframe_SPIN,"tframe_SPIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_tframe_SPIN,1e-6)); // 1e-8));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_eps,"eps"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_eps,1e-10));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_eps_SPIN,"eps_SPIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_eps_SPIN,1e-12));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_h1,"h1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_h1,1e-5));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_h1_SPIN,"h1_SPIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_h1_SPIN,1e-9));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_hmin,"hmin"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_hmin,1e-9));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_hmin_SPIN,"hmin_SPIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_hmin_SPIN,1e-12));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_SCALE,"def_SCALE"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_SCALE,1.0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_SCALE_SPIN,"def_SCALE_SPIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_SCALE_SPIN,1.0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_TIME_STEP_H,"def_TIME_STEP_H"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_TIME_STEP_H,1e-6));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_TIME_STEP_MIN,"def_TIME_STEP_MIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_TIME_STEP_MIN,1e-12));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_TIME_STEP_MAX,"def_TIME_STEP_MAX"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_TIME_STEP_MAX,1e-5));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_POS_X_TEST_NEUTRON,"def_POS_X_TEST_NEUTRON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_POS_X_TEST_NEUTRON,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_POS_Y_TEST_NEUTRON,"def_POS_Y_TEST_NEUTRON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_POS_Y_TEST_NEUTRON,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_POS_Z_TEST_NEUTRON,"def_POS_Z_TEST_NEUTRON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_POS_Z_TEST_NEUTRON,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_VEL_X_TEST_NEUTRON,"def_VEL_X_TEST_NEUTRON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_VEL_X_TEST_NEUTRON,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_VEL_Y_TEST_NEUTRON,"def_VEL_Y_TEST_NEUTRON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_VEL_Y_TEST_NEUTRON,9.8));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_VEL_Z_TEST_NEUTRON,"def_VEL_Z_TEST_NEUTRON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_VEL_Z_TEST_NEUTRON,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_ACCEL_X_CONST_ACCEL,"def_ACCEL_X_CONST_ACCEL"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_ACCEL_X_CONST_ACCEL,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_ACCEL_Y_CONST_ACCEL,"def_ACCEL_Y_CONST_ACCEL"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_ACCEL_Y_CONST_ACCEL,-9.8));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_ACCEL_Z_CONST_ACCEL,"def_ACCEL_Z_CONST_ACCEL"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_ACCEL_Z_CONST_ACCEL,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_SAFETY,"def_SAFETY"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_SAFETY,0.9));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_PGROW,"def_PGROW"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_PGROW,-0.2));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_PSHRNK,"def_PSHRNK"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_PSHRNK,-0.25));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_ERRCON,"def_ERRCON"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_ERRCON,1.89e-4));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_MAXERR,"def_MAXERR"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MAXERR,1e-10));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_TINY,"def_TINY"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_TINY,1e-12)); 
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_SAFETY1,"def_SAFETY1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_SAFETY1,0.9));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_PGROW1,"def_PGROW1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_PGROW1,-0.2));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_PSHRNK1,"def_PSHRNK1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_PSHRNK1,-0.25));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_ERRCON1,"def_ERRCON1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_ERRCON1,1.89e-4)); 
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_TINY1,"def_TINY1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_TINY1,1e-13));  
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_MAXERR1,"def_MAXERR1"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MAXERR1,1e-12));	
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_TMAX,"def_TMAX"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_TMAX,60));	
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_MASS,"def_MASS"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MASS,1.67492729e-27));	
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_MOMENT,"def_MOMENT"));
// 	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MOMENT,-5.05078353e-27));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MOMENT,-9.662364e-27));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_MOMENT_DIV_MASS,"def_MOMENT_DIV_MASS"));
// 	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MOMENT_DIV_MASS,(1.67492729/5.05078353)));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MOMENT_DIV_MASS,m_vi_CONST_DEFAULT[e_d_CONST_def_MOMENT]/m_vi_CONST_DEFAULT[e_d_CONST_def_MASS]));// (1.67492729/9.662364)));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_PI,"def_PI"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_PI,3.1415926536));	
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_MU,"def_MU"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_MU,1.256637061e-7));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HBAR,"def_HBAR"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HBAR,1.0545717e-34));   
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_pos_BASE,"def_pos_BASE"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_pos_BASE,1e0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_vel_BASE,"def_vel_BASE"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_vel_BASE,3e0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_NEUTRON_G_FACTOR,"def_NEUTRON_G_FACTOR"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_NEUTRON_G_FACTOR,-3.82608545));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_CORRECTIVE_FACTOR_SPIN,"def_CORRECTIVE_FACTOR_SPIN"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_CORRECTIVE_FACTOR_SPIN,1));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_START_SPIN_X,"def_START_SPIN_X"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_START_SPIN_X,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_START_SPIN_Y,"def_START_SPIN_Y"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_START_SPIN_Y,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_START_SPIN_Z,"def_START_SPIN_Z"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_START_SPIN_Z,0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HALBACH_NODES,"def_HALBACH_NODES"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HALBACH_NODES,20));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HALBACH_RADIUS,"def_HALBACH_RADIUS"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HALBACH_RADIUS,2));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HALBACH_CIRCUMFERENCE,"def_HALBACH_CIRCUMFERENCE"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HALBACH_CIRCUMFERENCE,2*m_vi_CONST_DEFAULT[e_d_CONST_def_PI]*m_vi_CONST_DEFAULT[e_d_CONST_def_HALBACH_RADIUS]));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HALBACH_WIDTH,"def_HALBACH_WIDTH"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HALBACH_WIDTH,(m_vi_CONST_DEFAULT[e_d_CONST_def_HALBACH_CIRCUMFERENCE]/m_vi_CONST_DEFAULT[e_d_CONST_def_HALBACH_NODES])));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HALBACH_K,"def_HALBACH_K"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HALBACH_K,((2*m_vi_CONST_DEFAULT[e_d_CONST_def_PI])/m_vi_CONST_DEFAULT[e_d_CONST_def_HALBACH_WIDTH])));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_HALBACH_MAX_TESLA,"def_HALBACH_MAX_TESLA"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_HALBACH_MAX_TESLA,100));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_GRAVITY,"def_GRAVITY"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_GRAVITY,-9.8));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_SPRING,"def_SPRING"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_SPRING,1e4));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_DISTANCE_BETWEEN_COILS,"def_DISTANCE_BETWEEN_COILS"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_DISTANCE_BETWEEN_COILS,1.0));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_CURRENT_ANTI_HH,"def_CURRENT_ANTI_HH"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_CURRENT_ANTI_HH,1e13));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_AM,"def_AM"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_AM,(1.0/m_vi_CONST_DEFAULT[e_d_CONST_INT_def_IM])));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_NDIV,"def_NDIV"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_NDIV,(1+((m_vi_CONST_DEFAULT[e_d_CONST_INT_def_IM]-1)/m_vi_CONST_DEFAULT[e_d_CONST_INT_def_NTAB]))));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_EPS,"def_EPS"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_EPS,1.2e-7));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_def_RNMX,"def_RNMX"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_def_RNMX,(1.0-m_vi_CONST_DEFAULT[e_d_CONST_def_EPS])));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_guide_1_radius,"guide_1_radius"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_guide_1_radius,0.03));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_DEFAULT_X,"DEFAULT_X"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_DEFAULT_X,0.));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_DEFAULT_Y,"DEFAULT_Y"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_DEFAULT_Y,0.));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_DEFAULT_Z,"DEFAULT_Z"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_DEFAULT_Z,0.));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_RF_BFIELD_MAG,"RF_BFIELD_MAG"));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_RF_BFIELD_MAG,2e-8));
	m_vi_cstr_CONST.insert(std::pair<int,string>(e_d_CONST_NEUTRON_GYROMAG_MOMENT,"NEUTRON_GYROMAG_MOMENT"));
// 	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_NEUTRON_GYROMAG_MOMENT,1.83247172e8));
	m_vi_CONST_DEFAULT.insert(std::pair<int,double>(e_d_CONST_NEUTRON_GYROMAG_MOMENT,	
		0.5 * m_vi_CONST_DEFAULT[e_d_CONST_def_NEUTRON_G_FACTOR] * 
		(m_vi_CONST_DEFAULT[e_d_CONST_def_MOMENT]/m_vi_CONST_DEFAULT[e_d_CONST_def_HBAR])));
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nH1:" <<  m_vi_CONST_DEFAULT[e_d_CONST_h1];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nH1_SPIN:" <<  m_vi_CONST_DEFAULT[e_d_CONST_h1_SPIN];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nTHREADS_INPUT: N/A\tEXP:" <<  vi_INPUT_e_d_CONST_INT_numThreads_EXP;
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nTHREADSPERBLOCK_MAX_INPUT: N/A\tEXP:" <<  vi_numThreadsPerBlock_EXP_TEMP;
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nTHREADS:" << m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreads]  << "\tEXP:" <<  m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreads_EXP];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nTHREADSPERBLOCK:" << m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreadsPerBlock]  << "\tEXP:" <<  m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numThreadsPerBlock_EXP];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nBLOCKS:" << m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numBlocks]  << "\tEXP:" << m_vi_CONST_INT_DEFAULT[e_d_CONST_INT_numBlocks_EXP];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	
	int index = 0;
	cout << "==================" << param_m_vi_CONST_INT.size() << "\n";
	for(map<int,int>::iterator m_vi_vi_IT = m_vi_CONST_INT_DEFAULT.begin(); m_vi_vi_IT!=m_vi_CONST_INT_DEFAULT.end(); ++m_vi_vi_IT, index++)
  {
		cout << m_vi_cstr_CONST_INT[index] << " current value = " << m_vi_CONST_INT_DEFAULT[index] << " XXXXXXXXXX ";
		cout << m_vi_cstr_CONST_INT[index] << " next value = ";
		if(param_m_vi_CONST_INT.count(m_vi_vi_IT->first)==0)
		{
			m_vi_CONST_INT.insert ( pair<int,int>(m_vi_vi_IT->first, m_vi_vi_IT->second) );
			cout << (m_vi_vi_IT->second);
			// m_vi_CONST_INT.erase(m_vi_vi_IT->first);
			// m_vi_CONST_INT.insert ( pair<int,int>(m_vi_vi_IT->first, m_vi_vi_IT->second) );
		}
		else
		{
			map<int,int>::iterator m_vi_vi_IT_TEMP = param_m_vi_CONST_INT.find(m_vi_vi_IT->first);
			m_vi_CONST_INT.insert ( pair<int,int>((m_vi_vi_IT_TEMP->first), (m_vi_vi_IT_TEMP->second)) );
		}
	}
	index = 0;
	cout << "==================" << param_m_vi_CONST.size() << "\n";
	for(map<int,double>::iterator m_vi_vd_IT = m_vi_CONST_DEFAULT.begin(); m_vi_vd_IT!=m_vi_CONST_DEFAULT.end(); ++m_vi_vd_IT, index++)
  {
		cout << m_vi_cstr_CONST[index] << " current value = " << m_vi_CONST_DEFAULT[index] << " XXXXXXXXXX ";
		cout << m_vi_cstr_CONST[index] << " next value = ";
		
		if(param_m_vi_CONST.count(m_vi_vd_IT->first)==0)
		{
			m_vi_CONST.insert ( pair<int,double>( (m_vi_vd_IT->first), (m_vi_vd_IT->second) ) );
			cout << (m_vi_vd_IT->second);
			// m_vi_CONST.erase(m_vi_vd_IT->first);
			// m_vi_CONST.insert ( pair<int,double>(m_vi_vd_IT->first, m_vi_vd_IT->second) );
		}
		else
		{
			map<int,double>::iterator m_vi_vd_IT_TEMP = param_m_vi_CONST.find(m_vi_vd_IT->first);
			m_vi_CONST.insert ( pair<int,double>(m_vi_vd_IT_TEMP->first, m_vi_vd_IT_TEMP->second) );
			cout << ((param_m_vi_CONST.find(m_vi_vd_IT->first))->second);
		
		}
		cout << "\n";
	}
	// printf("e_d_IO_LAST=%d,",e_d_IO_LAST);
	// printf(",e_d_IO_INT_LAST=%d",e_d_IO_INT_LAST);
	// printf(",mapsize of m_vi_CONST=%d",m_vi_CONST.size());
	// printf(",mapsize of m_vi_CONST_INT=%d",m_vi_CONST_INT.size());
	// printf(",mapsize of m_vi_cstr_CONST=%d",m_vi_cstr_CONST.size());
	// printf(",mapsize of m_vi_cstr_CONST_INT=%d",m_vi_cstr_CONST_INT.size());
	// printf("e_d_CONST_LAST=%d",e_d_CONST_LAST);
	// printf(",e_d_CONST_INT_LAST=%d",e_d_CONST_INT_LAST);
	
	// for(map<int,int>::iterator mvi_IT = param_m_vi_CONST_INT.begin(); mvi_IT!=param_m_vi_CONST_INT.end(); ++mvi_IT)
  // {
		// cout << (m_vi_CONST_INT.find(mvi_IT->first))->second << "ehlloelhel\n";
		// if(m_vi_CONST_INT.count(mvi_IT->first)==1)
		// {
			// if(
			// m_vi_CONST_INT.erase(it->first);
			// m_vi_CONST_INT.insert ( pair<int,int>(it->first, it->second) );
		// }
	// }
	// for(map<int,double>::iterator it = param_m_vi_CONST.begin(); it!=param_m_vi_CONST.end(); ++it)
  // {
		// if(m_vi_CONST_INT.count(it->first)==1)
		// {
			// m_vi_CONST_INT.erase(it->first);
			// m_vi_CONST_INT.insert ( pair<int,double>(it->first, it->second) );
		// }
	// }
	
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nH1:" <<  m_vi_CONST[e_d_CONST_h1];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	cout << "\nH1_SPIN:" <<  m_vi_CONST[e_d_CONST_h1_SPIN];
	cout << "\n<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
	
	for(int index = 0; index<e_d_CONST_LAST; index++) 
	{
		cout << "\n" << m_vi_cstr_CONST[index] << "=" << m_vi_CONST[index];
	}
	for(int index = 0; index<e_d_CONST_INT_LAST; index++) 
	{
		cout << "\n" << m_vi_cstr_CONST_INT[index] << "=" << m_vi_CONST_INT[index];
	}
	cout << "\n" << m_vi_cstr_CONST_INT[e_d_CONST_INT_numThreadsPerBlock] << "=" << m_vi_CONST_INT[e_d_CONST_INT_numThreadsPerBlock];
	cout << "\n" << m_vi_cstr_CONST_INT[e_d_CONST_INT_numThreadsPerBlock] << "=" << m_vi_CONST_INT[e_d_CONST_INT_numThreadsPerBlock];
	cout << "\n" << m_vi_cstr_CONST_INT[e_d_CONST_INT_numThreadsPerBlock] << "=" << m_vi_CONST_INT[e_d_CONST_INT_numThreadsPerBlock];
	cout << "\n" << m_vi_cstr_CONST_INT[e_d_CONST_INT_numThreadsPerBlock] << "=" << m_vi_CONST_INT[e_d_CONST_INT_numThreadsPerBlock];
	cout << "\n" << m_vi_cstr_CONST_INT[e_d_CONST_INT_numThreadsPerBlock] << "=" << m_vi_CONST_INT[e_d_CONST_INT_numThreadsPerBlock];
	int FIIK, i, j, k, l, m;
	int vi_PLACEHOLDER = 0;
	
	map<int, string> & r_m_vi_cstr_IO = m_vi_cstr_IO;
	map<int, string> & r_m_vi_cstr_IO_INT = m_vi_cstr_IO_INT;
	map<int, string> & r_m_vi_cstr_CONST = m_vi_cstr_CONST;
	map<int, string> & r_m_vi_cstr_CONST_INT = m_vi_cstr_CONST_INT;
	map<int, string> & r_m_vi_cstr_RKQS_ERROR = m_vi_cstr_RKQS_ERROR;
	map<int, int> & r_m_vi_CONST_INT = m_vi_CONST_INT;
	map<int, double> & r_m_vi_CONST = m_vi_CONST;
	
	const int numThreads_TEMP = r_m_vi_CONST_INT[e_d_CONST_INT_numThreads];
	const int numRecordsPerThread_TEMP = r_m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread];
	const int numRecords_TEMP = numThreads_TEMP*numRecordsPerThread_TEMP;
	
	// int vi_a1_INPUT[numThreads_TEMP*e_d_IO_INT_LAST];
	// double vd_a1_INPUT[numThreads_TEMP*e_d_IO_LAST];
	
	// fxn_STANDARD_INPUT_DATA(
		// r_m_vi_cstr_IO,
		// r_m_vi_cstr_IO_INT,
		// r_m_vi_cstr_CONST,
		// r_m_vi_cstr_CONST_INT,
		// r_m_vi_cstr_RKQS_ERROR,
		// r_m_vi_CONST_INT,
		// r_m_vi_CONST,
		// numThreads_TEMP,
		// vi_a1_INPUT, 
		// vd_a1_INPUT);
		// cout << "\nJUST BEFORE CONSTRUCTOR";
	// for(int i = 0; i<numThreads_TEMP; i++)
	// {
		// int vi_THREAD_INT_OFFSET = i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_INT_LAST;
		// int vi_THREAD_DOUBLE_OFFSET = i*m_vi_CONST_INT[e_d_CONST_INT_numRecordsPerThread]*e_d_IO_LAST;		
		// printf("\nID:%d|RECORD:%d|TIME:%f|XYZ=(%f,%f,%f)|VEL=(%f,%f,%f)|SPIN:(%f,%f,%f,%f)|HNEXT:%f",
			// vi_a1_INPUT[vi_THREAD_INT_OFFSET + e_d_IO_INT_THREAD], 
			// vi_a1_INPUT[vi_THREAD_INT_OFFSET + e_d_IO_INT_RECORD], 
			// vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_T], 
			// vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_X], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_Y], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_Z], 
			// vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_VX], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_VY], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_VZ], 
			// vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_0], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_1], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_2], vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_SPINNOR_3], 
			// vd_a1_INPUT[vi_THREAD_DOUBLE_OFFSET + e_d_IO_HNEXT]);
	// }
	return c_UCN_RUN_DATA(
		r_m_vi_cstr_IO,
		r_m_vi_cstr_IO_INT,
		r_m_vi_cstr_CONST,
		r_m_vi_cstr_CONST_INT,
		r_m_vi_cstr_RKQS_ERROR,
		r_m_vi_CONST_INT,
		r_m_vi_CONST,
		numThreads_TEMP,
		numRecordsPerThread_TEMP); //, 
		// vi_a1_INPUT, 
		// vd_a1_INPUT);
		
	// return fxn_PROXY_CONSTRUCTOR_c_UCN_RUN_DATA(
			// r_m_vi_cstr_IO,
			// r_m_vi_cstr_IO_INT,
			// r_m_vi_cstr_CONST,
			// r_m_vi_cstr_CONST_INT,
			// r_m_vi_cstr_RKQS_ERROR,
			// r_m_vi_CONST_INT,
			// r_m_vi_CONST);
}

